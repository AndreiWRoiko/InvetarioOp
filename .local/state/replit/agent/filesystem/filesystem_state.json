{"file_contents":{"DATABASE_GUIDE.md":{"content":"# Guia de Gerenciamento do Banco de Dados\n\n## Visão Geral\n\nO sistema agora usa um banco de dados PostgreSQL real para armazenar todos os dados. Este guia explica como gerenciar, exportar e importar dados.\n\n## Estrutura do Banco de Dados\n\nO banco de dados contém as seguintes tabelas:\n\n- **users** - Usuários do sistema\n- **notebooks** - Equipamentos tipo notebook\n- **celulares** - Equipamentos tipo celular\n- **terminais** - Equipamentos tipo terminal\n- **historico** - Histórico de modificações\n\n## Comandos Disponíveis\n\n### 1. Aplicar Migrações (Criar/Atualizar Tabelas)\n\n```bash\nnpm run db:push\n```\n\nEste comando sincroniza o schema do Drizzle ORM com o banco de dados. Use sempre que modificar `shared/schema.ts`.\n\nSe houver aviso de perda de dados, use:\n```bash\nnpm run db:push --force\n```\n\n### 2. Popular Banco com Usuário Admin\n\n```bash\nnpm run db:seed\n```\n\nCria o usuário admin padrão:\n- **Email**: admin@opus.com\n- **Senha**: opus@@2025$%\n\n### 3. Exportar Banco de Dados\n\n```bash\nnpm run db:export\n```\n\nCria um backup completo (dados em formato JSON) em `backups/database_export_TIMESTAMP.json`\n\nEste arquivo contém:\n- Todos os usuários\n- Todos os notebooks\n- Todos os celulares\n- Todos os terminais\n- Todo o histórico\n\n### 4. Importar Banco de Dados\n\n```bash\nnpm run db:import <arquivo.json>\n```\n\nImporta dados de um arquivo JSON para o banco de dados atual. \n\n**IMPORTANTE**: Este comando **adiciona** dados ao banco sem sobrescrever. Registros com IDs duplicados serão ignorados.\n\n## Exportar para Servidor Local\n\n### Passo a Passo Completo:\n\n1. **No Replit** - Exporte os dados:\n```bash\nnpm run db:export\n```\n\n2. **Copie o arquivo** gerado em `backups/database_export_TIMESTAMP.json` para seu servidor local\n\n3. **No servidor local** - Clone o projeto e configure:\n```bash\ngit clone <seu-repositorio>\ncd <projeto>\nnpm install\n```\n\n4. **Configure a conexão** com seu banco de dados PostgreSQL local:\n```bash\n# Crie um arquivo .env\nDATABASE_URL=postgresql://usuario:senha@localhost:5432/nome_banco\n```\n\n5. **Crie as tabelas** no banco local:\n```bash\nnpm run db:push\n```\n\n6. **Importe os dados**:\n```bash\nnpm run db:import backups/database_export_TIMESTAMP.json\n```\n\nPronto! Seu servidor local agora tem todos os dados.\n\n## Conectar a um Servidor PostgreSQL Externo\n\n### 1. Configurar Variável de Ambiente\n\nEdite o arquivo `.env` (ou configure nas variáveis de ambiente do Replit):\n\n```\nDATABASE_URL=postgresql://usuario:senha@seu-servidor:5432/nome_banco\n```\n\n### 2. Aplicar Schema\n\n```bash\nnpm run db:push\n```\n\n### 3. Popular com Admin\n\n```bash\nnpm run db:seed\n```\n\n### 4. Reiniciar Servidor\n\nO sistema agora estará conectado ao seu banco de dados externo.\n\n## Backup Automático (Recomendado)\n\nPara servidores de produção, recomenda-se configurar backups automáticos:\n\n### No Linux/Mac (via cron):\n\n1. Crie um script de backup `backup.sh`:\n```bash\n#!/bin/bash\ncd /caminho/para/projeto\nnpm run db:export\n# Opcional: enviar para backup externo\n# rsync -av backups/ usuario@servidor:/caminho/backups/\n```\n\n2. Adicione ao crontab para executar diariamente às 2h:\n```bash\ncrontab -e\n# Adicione esta linha:\n0 2 * * * /caminho/para/backup.sh\n```\n\n### No Windows (via Task Scheduler):\n\n1. Crie um arquivo `backup.bat`:\n```bat\n@echo off\ncd C:\\caminho\\para\\projeto\ncall npm run db:export\nrem Opcional: copiar para outro local\nrem xcopy /Y backups\\*.json D:\\Backups\\\n```\n\n2. Configure no Agendador de Tarefas:\n   - Abra \"Agendador de Tarefas\"\n   - Criar Tarefa Básica\n   - Configure para executar diariamente\n   - Ação: Iniciar programa `C:\\caminho\\para\\backup.bat`\n\n## Restaurar de Backup\n\n1. Localize o arquivo de backup JSON em `backups/`\n\n2. Execute o comando de importação:\n```bash\nnpm run db:import backups/database_export_YYYY-MM-DD_HHMMSS.json\n```\n\n**Nota**: A importação adiciona dados sem sobrescrever. Registros duplicados são ignorados.\n\n## Troubleshooting\n\n### Erro: \"relation already exists\"\n\nO schema já existe. Apenas importe os dados usando `npm run db:import`.\n\n### Erro: \"permission denied\"\n\nCertifique-se de que o usuário do banco de dados tem permissões adequadas:\n```sql\nGRANT ALL PRIVILEGES ON DATABASE nome_banco TO usuario;\n```\n\n### Dados não aparecem após importar\n\nVerifique se:\n1. O arquivo foi importado sem erros\n2. As tabelas existem: `\\dt` no psql\n3. Os dados foram inseridos: `SELECT COUNT(*) FROM users;`\n\n## Estrutura de Arquivos\n\n```\nproject/\n├── server/\n│   ├── db.ts              # Configuração do Drizzle\n│   ├── storage.ts         # Interface de acesso ao banco\n│   └── seed.ts            # Script de população inicial\n├── shared/\n│   └── schema.ts          # Definição do schema (tabelas)\n├── scripts/\n│   ├── export-data.ts     # Script de exportação (TypeScript)\n│   └── import-data.ts     # Script de importação (TypeScript)\n└── backups/               # Diretório de backups (criado automaticamente)\n```\n\n## Notas Importantes\n\n- ⚠️ **Segurança**: Adicione `backups/` ao `.gitignore` para não commitar dados sensíveis\n- ⚠️ **Senhas**: As senhas são armazenadas em texto simples. Em produção, implemente hash (bcrypt/argon2)\n- ⚠️ **Testes**: Sempre teste importações em ambiente de desenvolvimento primeiro\n- ⚠️ **Backups**: Crie backups antes de fazer alterações significativas no schema\n- ✅ **Timestamps**: Os arquivos de backup incluem data/hora automaticamente\n- ✅ **Formato JSON**: Fácil de visualizar, editar e debugar se necessário\n- ✅ **Portabilidade**: Arquivos JSON funcionam em qualquer ambiente com Node.js\n","size_bytes":5618},"design_guidelines.md":{"content":"# Design Guidelines - Sistema de Inventário\n\n## Design Approach\n\n**Selected Approach**: Design System - Material Design inspired with enterprise modifications\n\n**Justification**: This is a utility-focused, data-intensive inventory management system requiring:\n- Clear information hierarchy for complex forms and tables\n- Consistent, learnable interface patterns\n- Efficient data entry and retrieval workflows\n- Professional, trustworthy aesthetic suitable for enterprise use\n\n**Key Design Principles**:\n1. **Clarity First**: Every element serves a functional purpose\n2. **Efficiency**: Minimize clicks and cognitive load for repetitive tasks\n3. **Consistency**: Predictable patterns across all modules\n4. **Data Integrity**: Visual cues to prevent errors and confirm actions\n5. **Accessibility**: High contrast, readable text, clear focus states\n\n## Core Design Elements\n\n### A. Color Palette\n\n**Light Mode (Primary)**:\n- **Primary**: 210 85% 45% (Professional blue for actions, navigation)\n- **Primary Hover**: 210 85% 38%\n- **Secondary**: 210 20% 50% (Neutral gray-blue for less emphasis)\n- **Success**: 142 76% 36% (Green for confirmations, active status)\n- **Warning**: 38 92% 50% (Orange for pending, alerts)\n- **Error**: 0 84% 60% (Red for destructive actions, critical status)\n- **Background**: 0 0% 98% (Off-white main background)\n- **Surface**: 0 0% 100% (White cards, panels)\n- **Surface Hover**: 210 20% 98%\n- **Border**: 210 20% 88% (Subtle borders)\n- **Text Primary**: 210 15% 20% (Dark gray-blue)\n- **Text Secondary**: 210 10% 45%\n\n**Dark Mode (Optional)**:\n- **Primary**: 210 90% 60%\n- **Background**: 210 15% 12%\n- **Surface**: 210 15% 16%\n- **Border**: 210 15% 24%\n- **Text Primary**: 210 10% 95%\n\n**Status Colors** (consistent across modes):\n- **Em Uso** (In Use): 142 76% 36% (Green)\n- **Devolver** (Return): 38 92% 50% (Orange)\n- **Correio** (Mail): 210 85% 55% (Blue)\n- **Guardado** (Stored): 210 20% 50% (Gray)\n- **Troca** (Exchange): 280 65% 55% (Purple)\n\n### B. Typography\n\n**Font Stack**: \n- Primary: 'Inter', system-ui, -apple-system, sans-serif\n- Monospace (for IDs, patrimônio): 'JetBrains Mono', monospace\n\n**Scale**:\n- **Display**: 32px/36px, weight 600 (Page titles)\n- **H1**: 24px/32px, weight 600 (Section headers)\n- **H2**: 20px/28px, weight 600 (Card titles, module names)\n- **H3**: 18px/24px, weight 600 (Subsections)\n- **Body Large**: 16px/24px, weight 400 (Form labels, table headers)\n- **Body**: 14px/20px, weight 400 (Default text, table cells)\n- **Small**: 13px/18px, weight 400 (Helper text, timestamps)\n- **Caption**: 12px/16px, weight 400 (Metadata, counts)\n\n### C. Layout System\n\n**Spacing Primitives**: Use Tailwind units - 2, 3, 4, 6, 8, 12, 16, 20\n- Tight spacing: p-2, gap-2 (within buttons, compact lists)\n- Standard spacing: p-4, gap-4 (form fields, card content)\n- Section spacing: p-6, py-8 (card padding, section separation)\n- Page margins: p-8, px-12 (main content areas)\n\n**Grid System**:\n- **Sidebar Navigation**: Fixed 240px width on desktop, collapsible on tablet/mobile\n- **Main Content Area**: Fluid with max-width of 1400px\n- **Form Layouts**: 2-column grid on desktop (grid-cols-2), single column mobile\n- **Table Layouts**: Full-width responsive with horizontal scroll if needed\n- **Dashboard Cards**: 3-column grid on desktop (grid-cols-3), 2 on tablet, 1 on mobile\n\n### D. Component Library\n\n**Navigation**:\n- **Top Bar**: Fixed height 64px, contains logo, user profile, notifications\n- **Sidebar**: Collapsible menu with icons + labels, active state with primary color background at 10% opacity\n- **Breadcrumbs**: Show current location in hierarchy using chevron separators\n\n**Forms**:\n- **Input Fields**: Height 40px, rounded corners (rounded-md), border-2 on focus with primary color\n- **Labels**: Above inputs, body-large weight 500, with required asterisk in error color\n- **Select Dropdowns**: Custom styled with chevron icon, same height as inputs\n- **Date Pickers**: Calendar icon inside input on right, clear date functionality\n- **Checkboxes**: 20px square with checkmark, primary color when checked\n- **Text Areas**: Min height 100px, auto-expand with content, max height 300px\n- **Field Groups**: Related fields grouped with subtle background (surface color), padding p-4, rounded-lg\n\n**Buttons**:\n- **Primary**: Solid primary color, white text, height 40px, rounded-md, px-6\n- **Secondary**: Outlined with primary border, primary text\n- **Destructive**: Solid error color background\n- **Ghost**: Transparent background, hover shows surface color\n- All buttons have subtle shadow on hover, disabled state at 50% opacity\n\n**Tables**:\n- **Header**: Sticky, background surface color, font weight 600, border-bottom-2\n- **Rows**: Alternating subtle background (zebra striping), hover state with surface-hover color\n- **Action Buttons**: Small ghost buttons in action column (Ver Detalhes, Editar, Excluir)\n- **Filters**: Top of table, horizontal layout with select dropdowns and search input\n- **Pagination**: Bottom center, showing \"X-Y de Z items\"\n\n**Cards**:\n- **Standard Card**: White/surface background, rounded-lg, shadow-sm, padding p-6\n- **Stat Cards** (Dashboard): Primary metric large (display size), secondary info small, optional icon top-right\n- **Equipment Cards**: Header with equipment type + status badge, content area with key fields, footer with action buttons\n\n**Status Badges**:\n- **Pill Shape**: Rounded-full, px-3, py-1, text-sm font-medium\n- **Color Coded**: Background at 15% opacity of status color, text in solid status color\n- **With Icons**: Optional dot or icon before text\n\n**Modals**:\n- **Overlay**: Background black at 50% opacity\n- **Container**: Max-width 600px (forms) or 900px (details view), centered, rounded-lg, shadow-xl\n- **Header**: Padding p-6, border-bottom, title H2, close button top-right\n- **Content**: Padding p-6, max-height for scroll if needed\n- **Footer**: Padding p-6, border-top, buttons right-aligned\n\n**Data Visualization** (Dashboard):\n- **Charts**: Use Chart.js or similar, match color palette\n- **Bar Charts**: For equipment counts by status, category\n- **Line Charts**: For trends over time if applicable\n- **Donut Charts**: For distribution by UF, segmento\n\n**Histórico/Audit Log**:\n- **Timeline Layout**: Vertical line on left, cards connected to timeline\n- **Log Entry**: Timestamp (small, text-secondary), user name (body weight 600), action description, affected fields highlighted in code formatting\n\n### E. Page-Specific Layouts\n\n**Login Screen**:\n- Centered card 400px wide, logo at top, form fields stacked, \"Entrar\" button full-width, subtle gradient background\n\n**Dashboard (Perfil Controle)**:\n- 3-column stat card grid at top (Total Equipamentos, Por Status, Por UF)\n- Chart section below with 2 charts side-by-side\n- No equipment details, only aggregated metrics\n\n**Gestão de Usuários (Admin)**:\n- Table with columns: Nome, Email, Perfil (badge), Status (ativo/inativo badge), Ações\n- \"Adicionar Usuário\" button top-right primary\n- Modal form for new user with perfil selection (radio buttons)\n\n**Cadastro de Equipamento**:\n- Type selector at top (3 large cards: Notebook, Celular, Terminal)\n- Form sections with headers: Informações Básicas, Dados Técnicos, Documentação, Checklist (notebooks only)\n- Fields in 2-column grid, full-width for text areas\n- \"Salvar Equipamento\" primary button bottom-right, \"Cancelar\" secondary\n\n**Visualização de Inventário**:\n- Tabs for equipment type at top (Notebooks, Celulares, Terminais, Todos)\n- Filter bar below tabs (selects for Status, UF, Segmento, Fornecedor, search input)\n- Table with relevant columns per equipment type\n- Action column always right-most with 3 icon buttons\n\n**Detalhes do Equipamento** (Modal):\n- Two-column layout: left shows all field values (read-only with labels), right shows checklist status, termo/foto links as clickable buttons\n- Edit mode: same layout but fields become editable\n- \"Salvar Alterações\" saves and logs to histórico\n\n**Histórico**:\n- Filter by date range, user, action type at top\n- Timeline layout with most recent at top\n- Each entry expandable to show changed field values (before/after)\n\n### F. Animations\n\n**Minimal, purposeful animations only**:\n- Modal: Fade in overlay 150ms, scale content from 0.95 to 1 over 200ms\n- Dropdown menus: Slide down 150ms\n- Button hover: Background color transition 150ms\n- Table row hover: Background color transition 100ms\n- Page transitions: None (instant for data-focused app)\n\n## Implementation Notes\n\n- Maintain consistent 2-4-8 spacing rhythm throughout\n- All interactive elements must have clear hover, focus, and active states\n- Forms must show validation errors inline below fields in error color\n- Success messages appear as toast notifications top-right\n- Destructive actions (Excluir) require confirmation modal\n- Loading states use spinner on primary color for async operations\n- Empty states show helpful illustration + text + action button","size_bytes":8950},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Sistema de Gerenciamento de Inventário\n\n## Visão Geral\nSistema completo de gerenciamento de inventário para servidor local, com autenticação em três níveis de permissão e gestão de três tipos de equipamentos.\n\n## Estrutura do Projeto\n\n### Backend (server/)\n- **server/index.ts**: Ponto de entrada do servidor Express\n- **server/routes.ts**: Todas as rotas da API REST\n- **server/storage.ts**: Interface de armazenamento com implementação em memória\n- **shared/schema.ts**: Schemas Drizzle ORM e validação Zod\n\n### Frontend (client/src/)\n- **App.tsx**: Componente principal com roteamento e autenticação\n- **contexts/AuthContext.tsx**: Contexto de autenticação global\n- **pages/**: Páginas principais da aplicação\n  - Login.tsx: Tela de login\n  - Dashboard.tsx: Dashboard com métricas\n  - Inventario.tsx: Listagem e gerenciamento de equipamentos\n  - CadastroEquipamento.tsx: Cadastro de novos equipamentos\n  - Historico.tsx: Histórico de modificações\n  - GestaoUsuarios.tsx: Gestão de usuários (apenas Admin)\n- **components/**: Componentes reutilizáveis e formulários\n\n## Funcionalidades Implementadas\n\n### Autenticação\n- Login com email e senha\n- Três níveis de permissão:\n  - **Admin**: Acesso total (CRUD de usuários, equipamentos, visualização completa)\n  - **Suporte**: Gerenciamento de equipamentos (CRUD de equipamentos, sem gestão de usuários)\n  - **Controle**: Apenas visualização de métricas no dashboard\n- Persistência de sessão no localStorage\n- Proteção de rotas baseada em perfil\n\n### Gestão de Equipamentos\n- Três tipos de equipamentos:\n  - **Notebooks**: 20+ campos incluindo responsável, modelo, fornecedor, status, licença Office, CNPJ, etc.\n  - **Celulares**: Campos específicos como IMEI, número, emails de login/supervisão\n  - **Terminais**: Campos como número do relógio, status, status next\n- CRUD completo para todos os tipos\n- Filtros avançados: busca, status, UF, segmento, fornecedor\n- Visualização em abas (Todos, Notebooks, Celulares, Terminais)\n- Confirmação de exclusão com AlertDialog\n- Campos padronizados com dropdowns:\n  - **UF**: Todos os 27 estados brasileiros (AC, AL, AP, AM, BA, CE, DF, ES, GO, MA, MT, MS, MG, PA, PB, PR, PE, PI, RJ, RN, RS, RO, RR, SC, SP, SE, TO)\n  - **CNPJ**: 8 empresas pré-cadastradas (ATENAS, TELOS, OPUS e suas filiais)\n  - **Office**: 3 opções (NÃO LICENCIADO, OFFICE BASIC, OFFICE STANDARD)\n\n### Dashboard\n- Métricas em tempo real:\n  - Total de equipamentos\n  - Distribuição por status\n  - Distribuição por UF\n  - Distribuição por segmento\n  - Distribuição por fornecedor (notebooks)\n- Gráficos interativos com Recharts\n\n### Histórico\n- Registro automático de todas as modificações\n- Três tipos de ação: criação, edição, exclusão\n- Filtros por data (inicial/final) e tipo de ação\n- Timeline visual com detalhes de usuário, timestamp e equipamento\n\n### Gestão de Usuários (Admin apenas)\n- Listar todos os usuários\n- Criar novos usuários com nome, email, senha e perfil\n- Alternar status ativo/inativo\n- Excluir usuários\n- Validação de email único\n\n## API Endpoints\n\n### Autenticação\n- `POST /api/auth/login`: Login de usuário\n\n### Usuários\n- `GET /api/users`: Listar todos os usuários\n- `GET /api/users/:id`: Buscar usuário por ID\n- `POST /api/users`: Criar novo usuário\n- `PATCH /api/users/:id`: Atualizar usuário\n- `DELETE /api/users/:id`: Excluir usuário\n\n### Notebooks\n- `GET /api/notebooks`: Listar todos os notebooks\n- `GET /api/notebooks/:id`: Buscar notebook por ID\n- `POST /api/notebooks`: Criar novo notebook\n- `PATCH /api/notebooks/:id`: Atualizar notebook\n- `DELETE /api/notebooks/:id`: Excluir notebook\n\n### Celulares\n- `GET /api/celulares`: Listar todos os celulares\n- `GET /api/celulares/:id`: Buscar celular por ID\n- `POST /api/celulares`: Criar novo celular\n- `PATCH /api/celulares/:id`: Atualizar celular\n- `DELETE /api/celulares/:id`: Excluir celular\n\n### Terminais\n- `GET /api/terminais`: Listar todos os terminais\n- `GET /api/terminais/:id`: Buscar terminal por ID\n- `POST /api/terminais`: Criar novo terminal\n- `PATCH /api/terminais/:id`: Atualizar terminal\n- `DELETE /api/terminais/:id`: Excluir terminal\n\n### Histórico\n- `GET /api/historico`: Listar todo o histórico\n- `GET /api/historico/equipment/:equipmentId`: Histórico de um equipamento específico\n\n### Dashboard\n- `GET /api/dashboard/stats`: Estatísticas agregadas do inventário\n\n## Usuário Padrão\n- **Email**: admin@opus.com\n- **Senha**: opus@@2025$%\n- **Perfil**: Admin\n\n## Status dos Equipamentos\n- **EM USO**: Verde (Equipamento em uso ativo)\n- **DEVOLVER**: Laranja (Equipamento a ser devolvido)\n- **CORREIO**: Azul (Equipamento em trânsito)\n- **GUARDADO**: Cinza (Equipamento armazenado)\n- **TROCA**: Roxo (Equipamento para troca - apenas terminais)\n\n## Fornecedores (Notebooks)\n- MAGNA\n- OPUS\n- ONLY\n- ALLU\n\n## Tecnologias\n- **Frontend**: React, TypeScript, Wouter (routing), TanStack Query, shadcn/ui\n- **Backend**: Express.js, TypeScript\n- **Validação**: Zod, drizzle-zod\n- **ORM**: Drizzle ORM (com PostgreSQL configurado, mas usando storage em memória)\n- **Estilo**: Tailwind CSS com design system customizado\n\n## Design System\n- Paleta de cores baseada em Material Design com abordagem enterprise\n- Componentes shadcn/ui customizados\n- Sistema de sidebar responsivo\n- **Dark mode implementado** com alternância via botão no header\n- Tema persiste no localStorage\n- Design guidelines em `design_guidelines.md`\n\n## Estado Atual\n✅ Backend completo com todas as rotas implementadas\n✅ Frontend totalmente integrado com APIs\n✅ Sistema de autenticação funcional\n✅ CRUD completo para todos os tipos de equipamentos\n✅ Histórico automático de modificações\n✅ Dashboard com dados em tempo real\n✅ Gestão de usuários (Admin)\n✅ Validação de formulários\n✅ Confirmações de exclusão\n✅ Filtros e busca avançada\n✅ Interface totalmente em português do Brasil\n\n## Alterações Recentes (Outubro 2025)\n- ✅ **Campo Office**: Adicionado dropdown com 3 opções de licença Office nos notebooks\n- ✅ **Campo CNPJ**: Convertido para dropdown com 8 empresas pré-cadastradas\n- ✅ **Estados completos**: Campo UF expandido para incluir todos os 27 estados do Brasil\n- ✅ **Dark Mode**: Implementado tema escuro com:\n  - ThemeProvider para gerenciamento de estado\n  - ThemeToggle com ícones (Sol/Lua) no header\n  - Persistência da preferência no localStorage\n  - Variáveis CSS completas para light/dark mode\n  - Transições suaves entre temas\n\n## Próximos Passos Sugeridos\n- Migrar storage em memória para PostgreSQL usando Drizzle ORM\n- Implementar edição de equipamentos\n- Adicionar visualização detalhada de equipamentos\n- Implementar edição de perfil de usuário\n- Adicionar paginação para grandes listas\n- Implementar exportação de dados (CSV/Excel)\n- Adicionar gráficos adicionais no dashboard\n- Implementar notificações para ações importantes\n- Adicionar funcionalidade de impressão de termos\n","size_bytes":7017},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"scripts/export-data.ts":{"content":"import { db } from \"../server/db.js\";\nimport { users, notebooks, celulares, terminais, historico } from \"../shared/schema.js\";\nimport { writeFileSync, mkdirSync } from \"fs\";\nimport { join } from \"path\";\n\nasync function exportData() {\n  console.log(\"Exportando dados do banco de dados...\");\n\n  try {\n    // Criar diretório de backups se não existir\n    mkdirSync(\"backups\", { recursive: true });\n\n    // Buscar todos os dados\n    const allUsers = await db.select().from(users);\n    const allNotebooks = await db.select().from(notebooks);\n    const allCelulares = await db.select().from(celulares);\n    const allTerminais = await db.select().from(terminais);\n    const allHistorico = await db.select().from(historico);\n\n    // Criar objeto com todos os dados\n    const exportData = {\n      exportDate: new Date().toISOString(),\n      version: \"1.0\",\n      data: {\n        users: allUsers,\n        notebooks: allNotebooks,\n        celulares: allCelulares,\n        terminais: allTerminais,\n        historico: allHistorico,\n      },\n      stats: {\n        users: allUsers.length,\n        notebooks: allNotebooks.length,\n        celulares: allCelulares.length,\n        terminais: allTerminais.length,\n        historico: allHistorico.length,\n      },\n    };\n\n    // Criar nome do arquivo com timestamp\n    const timestamp = new Date().toISOString().replace(/[:.]/g, \"-\").split(\"T\")[0] + \"_\" + \n                      new Date().toTimeString().split(\" \")[0].replace(/:/g, \"\");\n    const filename = join(\"backups\", `database_export_${timestamp}.json`);\n\n    // Salvar arquivo\n    writeFileSync(filename, JSON.stringify(exportData, null, 2));\n\n    console.log(\"\\n✓ Dados exportados com sucesso!\");\n    console.log(`  Arquivo: ${filename}`);\n    console.log(\"\\nEstatísticas:\");\n    console.log(`  Usuários: ${exportData.stats.users}`);\n    console.log(`  Notebooks: ${exportData.stats.notebooks}`);\n    console.log(`  Celulares: ${exportData.stats.celulares}`);\n    console.log(`  Terminais: ${exportData.stats.terminais}`);\n    console.log(`  Histórico: ${exportData.stats.historico}`);\n    console.log(\"\\nPara importar em outro servidor:\");\n    console.log(`  npm run db:import-json ${filename}`);\n    \n    process.exit(0);\n  } catch (error) {\n    console.error(\"Erro ao exportar dados:\", error);\n    process.exit(1);\n  }\n}\n\nexportData();\n","size_bytes":2336},"scripts/import-data.ts":{"content":"import { db } from \"../server/db.js\";\nimport { users, notebooks, celulares, terminais, historico } from \"../shared/schema.js\";\nimport { readFileSync } from \"fs\";\n\nasync function importData(filename: string) {\n  if (!filename) {\n    console.error(\"Erro: Nenhum arquivo especificado\");\n    console.log(\"Uso: npm run db:import-json <arquivo.json>\");\n    process.exit(1);\n  }\n\n  console.log(`Importando dados de: ${filename}`);\n  console.log(\"ATENÇÃO: Isso irá adicionar dados ao banco de dados atual!\\n\");\n\n  try {\n    // Ler arquivo\n    const fileContent = readFileSync(filename, \"utf-8\");\n    const importData = JSON.parse(fileContent);\n\n    if (!importData.data) {\n      throw new Error(\"Formato de arquivo inválido\");\n    }\n\n    console.log(\"Dados a importar:\");\n    console.log(`  Usuários: ${importData.data.users?.length || 0}`);\n    console.log(`  Notebooks: ${importData.data.notebooks?.length || 0}`);\n    console.log(`  Celulares: ${importData.data.celulares?.length || 0}`);\n    console.log(`  Terminais: ${importData.data.terminais?.length || 0}`);\n    console.log(`  Histórico: ${importData.data.historico?.length || 0}`);\n    console.log(\"\");\n\n    let imported = {\n      users: 0,\n      notebooks: 0,\n      celulares: 0,\n      terminais: 0,\n      historico: 0,\n    };\n\n    // Importar usuários\n    if (importData.data.users && importData.data.users.length > 0) {\n      for (const user of importData.data.users) {\n        try {\n          await db.insert(users).values(user).onConflictDoNothing();\n          imported.users++;\n        } catch (err) {\n          console.warn(`  Aviso: Usuário ${user.email} já existe, pulando...`);\n        }\n      }\n    }\n\n    // Importar notebooks\n    if (importData.data.notebooks && importData.data.notebooks.length > 0) {\n      for (const notebook of importData.data.notebooks) {\n        try {\n          await db.insert(notebooks).values(notebook).onConflictDoNothing();\n          imported.notebooks++;\n        } catch (err) {\n          console.warn(`  Aviso: Notebook ${notebook.id} já existe, pulando...`);\n        }\n      }\n    }\n\n    // Importar celulares\n    if (importData.data.celulares && importData.data.celulares.length > 0) {\n      for (const celular of importData.data.celulares) {\n        try {\n          await db.insert(celulares).values(celular).onConflictDoNothing();\n          imported.celulares++;\n        } catch (err) {\n          console.warn(`  Aviso: Celular ${celular.id} já existe, pulando...`);\n        }\n      }\n    }\n\n    // Importar terminais\n    if (importData.data.terminais && importData.data.terminais.length > 0) {\n      for (const terminal of importData.data.terminais) {\n        try {\n          await db.insert(terminais).values(terminal).onConflictDoNothing();\n          imported.terminais++;\n        } catch (err) {\n          console.warn(`  Aviso: Terminal ${terminal.id} já existe, pulando...`);\n        }\n      }\n    }\n\n    // Importar histórico\n    if (importData.data.historico && importData.data.historico.length > 0) {\n      for (const hist of importData.data.historico) {\n        try {\n          await db.insert(historico).values(hist).onConflictDoNothing();\n          imported.historico++;\n        } catch (err) {\n          console.warn(`  Aviso: Histórico ${hist.id} já existe, pulando...`);\n        }\n      }\n    }\n\n    console.log(\"\\n✓ Importação concluída!\");\n    console.log(\"\\nDados importados:\");\n    console.log(`  Usuários: ${imported.users}`);\n    console.log(`  Notebooks: ${imported.notebooks}`);\n    console.log(`  Celulares: ${imported.celulares}`);\n    console.log(`  Terminais: ${imported.terminais}`);\n    console.log(`  Histórico: ${imported.historico}`);\n\n    process.exit(0);\n  } catch (error) {\n    console.error(\"Erro ao importar dados:\", error);\n    process.exit(1);\n  }\n}\n\n// Pegar nome do arquivo dos argumentos\nconst filename = process.argv[2];\nimportData(filename);\n","size_bytes":3907},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport {\n  insertUserSchema,\n  insertNotebookSchema,\n  insertCelularSchema,\n  insertTerminalSchema,\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // ========== Autenticação ==========\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, senha } = req.body;\n\n      if (!email || !senha) {\n        return res.status(400).json({ error: \"Email e senha são obrigatórios\" });\n      }\n\n      const user = await storage.getUserByEmail(email);\n      \n      if (!user || user.senha !== senha) {\n        return res.status(401).json({ error: \"Credenciais inválidas\" });\n      }\n\n      if (!user.ativo) {\n        return res.status(403).json({ error: \"Usuário inativo\" });\n      }\n\n      // Não retornar senha\n      const { senha: _, ...userWithoutPassword } = user;\n      res.json({ user: userWithoutPassword });\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao fazer login\" });\n    }\n  });\n\n  // ========== Usuários ==========\n  app.get(\"/api/users\", async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      // Remover senhas\n      const usersWithoutPasswords = users.map(({ senha, ...user }) => user);\n      res.json(usersWithoutPasswords);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar usuários\" });\n    }\n  });\n\n  app.get(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ error: \"Usuário não encontrado\" });\n      }\n      const { senha, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar usuário\" });\n    }\n  });\n\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Verificar se email já existe\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ error: \"Email já cadastrado\" });\n      }\n\n      const user = await storage.createUser(userData);\n      const { senha, ...userWithoutPassword } = user;\n      \n      res.status(201).json(userWithoutPassword);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      res.status(500).json({ error: \"Erro ao criar usuário\" });\n    }\n  });\n\n  app.patch(\"/api/users/:id\", async (req, res) => {\n    try {\n      const updateData = req.body;\n      const user = await storage.updateUser(req.params.id, updateData);\n      \n      if (!user) {\n        return res.status(404).json({ error: \"Usuário não encontrado\" });\n      }\n\n      const { senha, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao atualizar usuário\" });\n    }\n  });\n\n  app.delete(\"/api/users/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteUser(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: \"Usuário não encontrado\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao deletar usuário\" });\n    }\n  });\n\n  // ========== Notebooks ==========\n  app.get(\"/api/notebooks\", async (req, res) => {\n    try {\n      const notebooks = await storage.getAllNotebooks();\n      res.json(notebooks);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar notebooks\" });\n    }\n  });\n\n  app.get(\"/api/notebooks/:id\", async (req, res) => {\n    try {\n      const notebook = await storage.getNotebook(req.params.id);\n      if (!notebook) {\n        return res.status(404).json({ error: \"Notebook não encontrado\" });\n      }\n      res.json(notebook);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar notebook\" });\n    }\n  });\n\n  app.post(\"/api/notebooks\", async (req, res) => {\n    try {\n      const notebookData = insertNotebookSchema.parse(req.body);\n      const notebook = await storage.createNotebook(notebookData);\n      \n      // Registrar no histórico\n      const userId = req.body._userId || \"system\";\n      const userName = req.body._userName || \"Sistema\";\n      \n      await storage.createHistorico({\n        action: \"criacao\",\n        userId,\n        userName,\n        equipmentType: \"notebook\",\n        equipmentId: notebook.id,\n        details: \"Cadastrou novo equipamento\",\n        equipment: `Notebook ${notebook.modelo} - ${notebook.responsavel}`,\n      });\n\n      res.status(201).json(notebook);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      res.status(500).json({ error: \"Erro ao criar notebook\" });\n    }\n  });\n\n  app.patch(\"/api/notebooks/:id\", async (req, res) => {\n    try {\n      const updateData = req.body;\n      const { _userId, _userName, ...notebookData } = updateData;\n      \n      const notebook = await storage.updateNotebook(req.params.id, notebookData);\n      \n      if (!notebook) {\n        return res.status(404).json({ error: \"Notebook não encontrado\" });\n      }\n\n      // Registrar no histórico\n      const userId = _userId || \"system\";\n      const userName = _userName || \"Sistema\";\n      \n      await storage.createHistorico({\n        action: \"edicao\",\n        userId,\n        userName,\n        equipmentType: \"notebook\",\n        equipmentId: notebook.id,\n        details: \"Atualizou informações do equipamento\",\n        equipment: `Notebook ${notebook.modelo} - ${notebook.responsavel}`,\n      });\n\n      res.json(notebook);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao atualizar notebook\" });\n    }\n  });\n\n  app.delete(\"/api/notebooks/:id\", async (req, res) => {\n    try {\n      const notebook = await storage.getNotebook(req.params.id);\n      if (!notebook) {\n        return res.status(404).json({ error: \"Notebook não encontrado\" });\n      }\n\n      const userId = req.body._userId || \"system\";\n      const userName = req.body._userName || \"Sistema\";\n\n      const success = await storage.deleteNotebook(req.params.id);\n      \n      if (success) {\n        // Registrar no histórico\n        await storage.createHistorico({\n          action: \"exclusao\",\n          userId,\n          userName,\n          equipmentType: \"notebook\",\n          equipmentId: notebook.id,\n          details: \"Removeu equipamento do inventário\",\n          equipment: `Notebook ${notebook.modelo} - ${notebook.responsavel}`,\n        });\n      }\n\n      res.json({ success });\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao deletar notebook\" });\n    }\n  });\n\n  // ========== Celulares ==========\n  app.get(\"/api/celulares\", async (req, res) => {\n    try {\n      const celulares = await storage.getAllCelulares();\n      res.json(celulares);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar celulares\" });\n    }\n  });\n\n  app.get(\"/api/celulares/:id\", async (req, res) => {\n    try {\n      const celular = await storage.getCelular(req.params.id);\n      if (!celular) {\n        return res.status(404).json({ error: \"Celular não encontrado\" });\n      }\n      res.json(celular);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar celular\" });\n    }\n  });\n\n  app.post(\"/api/celulares\", async (req, res) => {\n    try {\n      const celularData = insertCelularSchema.parse(req.body);\n      const celular = await storage.createCelular(celularData);\n      \n      const userId = req.body._userId || \"system\";\n      const userName = req.body._userName || \"Sistema\";\n      \n      await storage.createHistorico({\n        action: \"criacao\",\n        userId,\n        userName,\n        equipmentType: \"celular\",\n        equipmentId: celular.id,\n        details: \"Cadastrou novo equipamento\",\n        equipment: `Celular ${celular.modelo} - ${celular.responsavel}`,\n      });\n\n      res.status(201).json(celular);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      res.status(500).json({ error: \"Erro ao criar celular\" });\n    }\n  });\n\n  app.patch(\"/api/celulares/:id\", async (req, res) => {\n    try {\n      const updateData = req.body;\n      const { _userId, _userName, ...celularData } = updateData;\n      \n      const celular = await storage.updateCelular(req.params.id, celularData);\n      \n      if (!celular) {\n        return res.status(404).json({ error: \"Celular não encontrado\" });\n      }\n\n      const userId = _userId || \"system\";\n      const userName = _userName || \"Sistema\";\n      \n      await storage.createHistorico({\n        action: \"edicao\",\n        userId,\n        userName,\n        equipmentType: \"celular\",\n        equipmentId: celular.id,\n        details: \"Atualizou informações do equipamento\",\n        equipment: `Celular ${celular.modelo} - ${celular.responsavel}`,\n      });\n\n      res.json(celular);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao atualizar celular\" });\n    }\n  });\n\n  app.delete(\"/api/celulares/:id\", async (req, res) => {\n    try {\n      const celular = await storage.getCelular(req.params.id);\n      if (!celular) {\n        return res.status(404).json({ error: \"Celular não encontrado\" });\n      }\n\n      const userId = req.body._userId || \"system\";\n      const userName = req.body._userName || \"Sistema\";\n\n      const success = await storage.deleteCelular(req.params.id);\n      \n      if (success) {\n        await storage.createHistorico({\n          action: \"exclusao\",\n          userId,\n          userName,\n          equipmentType: \"celular\",\n          equipmentId: celular.id,\n          details: \"Removeu equipamento do inventário\",\n          equipment: `Celular ${celular.modelo} - ${celular.responsavel}`,\n        });\n      }\n\n      res.json({ success });\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao deletar celular\" });\n    }\n  });\n\n  // ========== Terminais ==========\n  app.get(\"/api/terminais\", async (req, res) => {\n    try {\n      const terminais = await storage.getAllTerminais();\n      res.json(terminais);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar terminais\" });\n    }\n  });\n\n  app.get(\"/api/terminais/:id\", async (req, res) => {\n    try {\n      const terminal = await storage.getTerminal(req.params.id);\n      if (!terminal) {\n        return res.status(404).json({ error: \"Terminal não encontrado\" });\n      }\n      res.json(terminal);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar terminal\" });\n    }\n  });\n\n  app.post(\"/api/terminais\", async (req, res) => {\n    try {\n      const terminalData = insertTerminalSchema.parse(req.body);\n      const terminal = await storage.createTerminal(terminalData);\n      \n      const userId = req.body._userId || \"system\";\n      const userName = req.body._userName || \"Sistema\";\n      \n      await storage.createHistorico({\n        action: \"criacao\",\n        userId,\n        userName,\n        equipmentType: \"terminal\",\n        equipmentId: terminal.id,\n        details: \"Cadastrou novo equipamento\",\n        equipment: `Terminal ${terminal.numeroRelogio} - ${terminal.segmento}`,\n      });\n\n      res.status(201).json(terminal);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      res.status(500).json({ error: \"Erro ao criar terminal\" });\n    }\n  });\n\n  app.patch(\"/api/terminais/:id\", async (req, res) => {\n    try {\n      const updateData = req.body;\n      const { _userId, _userName, ...terminalData } = updateData;\n      \n      const terminal = await storage.updateTerminal(req.params.id, terminalData);\n      \n      if (!terminal) {\n        return res.status(404).json({ error: \"Terminal não encontrado\" });\n      }\n\n      const userId = _userId || \"system\";\n      const userName = _userName || \"Sistema\";\n      \n      await storage.createHistorico({\n        action: \"edicao\",\n        userId,\n        userName,\n        equipmentType: \"terminal\",\n        equipmentId: terminal.id,\n        details: \"Atualizou informações do equipamento\",\n        equipment: `Terminal ${terminal.numeroRelogio} - ${terminal.segmento}`,\n      });\n\n      res.json(terminal);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao atualizar terminal\" });\n    }\n  });\n\n  app.delete(\"/api/terminais/:id\", async (req, res) => {\n    try {\n      const terminal = await storage.getTerminal(req.params.id);\n      if (!terminal) {\n        return res.status(404).json({ error: \"Terminal não encontrado\" });\n      }\n\n      const userId = req.body._userId || \"system\";\n      const userName = req.body._userName || \"Sistema\";\n\n      const success = await storage.deleteTerminal(req.params.id);\n      \n      if (success) {\n        await storage.createHistorico({\n          action: \"exclusao\",\n          userId,\n          userName,\n          equipmentType: \"terminal\",\n          equipmentId: terminal.id,\n          details: \"Removeu equipamento do inventário\",\n          equipment: `Terminal ${terminal.numeroRelogio} - ${terminal.segmento}`,\n        });\n      }\n\n      res.json({ success });\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao deletar terminal\" });\n    }\n  });\n\n  // ========== Histórico ==========\n  app.get(\"/api/historico\", async (req, res) => {\n    try {\n      const historico = await storage.getAllHistorico();\n      res.json(historico);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar histórico\" });\n    }\n  });\n\n  app.get(\"/api/historico/equipment/:equipmentId\", async (req, res) => {\n    try {\n      const historico = await storage.getHistoricoByEquipment(req.params.equipmentId);\n      res.json(historico);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar histórico do equipamento\" });\n    }\n  });\n\n  // ========== Dashboard Stats ==========\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      const notebooks = await storage.getAllNotebooks();\n      const celulares = await storage.getAllCelulares();\n      const terminais = await storage.getAllTerminais();\n      \n      const allEquipment = [\n        ...notebooks.map(n => ({ tipo: 'notebook', status: n.status, uf: n.uf, segmento: n.segmento, fornecedor: n.fornecedor })),\n        ...celulares.map(c => ({ tipo: 'celular', status: c.status, uf: c.uf, segmento: c.segmento, fornecedor: null })),\n        ...terminais.map(t => ({ tipo: 'terminal', status: t.status, uf: t.uf, segmento: t.segmento, fornecedor: null })),\n      ];\n\n      const totalEquipment = allEquipment.length;\n      \n      const byStatus: Record<string, number> = {};\n      const byUF: Record<string, number> = {};\n      const bySegmento: Record<string, number> = {};\n      const byFornecedor: Record<string, number> = {};\n\n      allEquipment.forEach(eq => {\n        byStatus[eq.status] = (byStatus[eq.status] || 0) + 1;\n        byUF[eq.uf] = (byUF[eq.uf] || 0) + 1;\n        bySegmento[eq.segmento] = (bySegmento[eq.segmento] || 0) + 1;\n        if (eq.fornecedor) {\n          byFornecedor[eq.fornecedor] = (byFornecedor[eq.fornecedor] || 0) + 1;\n        }\n      });\n\n      res.json({\n        totalEquipment,\n        byStatus,\n        byUF,\n        bySegmento,\n        byFornecedor,\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar estatísticas\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":15764},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { users } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nasync function seed() {\n  console.log(\"Seeding database...\");\n\n  // Check if admin user already exists\n  const existingAdmin = await db.select().from(users).limit(1);\n  \n  if (existingAdmin.length === 0) {\n    // Create default admin user\n    const adminId = randomUUID();\n    await db.insert(users).values({\n      id: adminId,\n      nome: \"Admin Opus\",\n      email: \"admin@opus.com\",\n      senha: \"opus@@2025$%\",\n      perfil: \"Admin\",\n      ativo: true,\n      createdAt: new Date(),\n    });\n    \n    console.log(\"✓ Admin user created successfully\");\n    console.log(\"  Email: admin@opus.com\");\n    console.log(\"  Password: opus@@2025$%\");\n  } else {\n    console.log(\"✓ Database already seeded\");\n  }\n\n  process.exit(0);\n}\n\nseed().catch((error) => {\n  console.error(\"Error seeding database:\", error);\n  process.exit(1);\n});\n","size_bytes":934},"server/storage.ts":{"content":"import {\n  type User,\n  type InsertUser,\n  type Notebook,\n  type InsertNotebook,\n  type Celular,\n  type InsertCelular,\n  type Terminal,\n  type InsertTerminal,\n  type Historico,\n  type InsertHistorico,\n  users,\n  notebooks,\n  celulares,\n  terminais,\n  historico,\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { eq, desc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Usuários\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User | undefined>;\n  deleteUser(id: string): Promise<boolean>;\n  getAllUsers(): Promise<User[]>;\n\n  // Notebooks\n  getNotebook(id: string): Promise<Notebook | undefined>;\n  createNotebook(notebook: InsertNotebook): Promise<Notebook>;\n  updateNotebook(id: string, notebook: Partial<InsertNotebook>): Promise<Notebook | undefined>;\n  deleteNotebook(id: string): Promise<boolean>;\n  getAllNotebooks(): Promise<Notebook[]>;\n\n  // Celulares\n  getCelular(id: string): Promise<Celular | undefined>;\n  createCelular(celular: InsertCelular): Promise<Celular>;\n  updateCelular(id: string, celular: Partial<InsertCelular>): Promise<Celular | undefined>;\n  deleteCelular(id: string): Promise<boolean>;\n  getAllCelulares(): Promise<Celular[]>;\n\n  // Terminais\n  getTerminal(id: string): Promise<Terminal | undefined>;\n  createTerminal(terminal: InsertTerminal): Promise<Terminal>;\n  updateTerminal(id: string, terminal: Partial<InsertTerminal>): Promise<Terminal | undefined>;\n  deleteTerminal(id: string): Promise<boolean>;\n  getAllTerminais(): Promise<Terminal[]>;\n\n  // Histórico\n  createHistorico(historico: InsertHistorico): Promise<Historico>;\n  getAllHistorico(): Promise<Historico[]>;\n  getHistoricoByEquipment(equipmentId: string): Promise<Historico[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private notebooks: Map<string, Notebook>;\n  private celulares: Map<string, Celular>;\n  private terminais: Map<string, Terminal>;\n  private historico: Map<string, Historico>;\n\n  constructor() {\n    this.users = new Map();\n    this.notebooks = new Map();\n    this.celulares = new Map();\n    this.terminais = new Map();\n    this.historico = new Map();\n\n    // Criar usuário admin padrão\n    const adminId = randomUUID();\n    const adminUser: User = {\n      id: adminId,\n      nome: \"Admin Opus\",\n      email: \"admin@opus.com\",\n      senha: \"opus@@2025$%\",\n      perfil: \"Admin\",\n      ativo: true,\n      createdAt: new Date(),\n    };\n    this.users.set(adminId, adminUser);\n  }\n\n  // Usuários\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find((user) => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = {\n      id,\n      nome: insertUser.nome,\n      email: insertUser.email,\n      senha: insertUser.senha,\n      perfil: insertUser.perfil,\n      ativo: insertUser.ativo ?? true,\n      createdAt: new Date(),\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updateData: Partial<InsertUser>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    const updated = { ...user, ...updateData };\n    this.users.set(id, updated);\n    return updated;\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    return this.users.delete(id);\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n\n  // Notebooks\n  async getNotebook(id: string): Promise<Notebook | undefined> {\n    return this.notebooks.get(id);\n  }\n\n  async createNotebook(insertNotebook: InsertNotebook): Promise<Notebook> {\n    const id = randomUUID();\n    const now = new Date();\n    const notebook: Notebook = {\n      id,\n      responsavel: insertNotebook.responsavel,\n      uf: insertNotebook.uf,\n      centroCusto: insertNotebook.centroCusto ?? null,\n      segmento: insertNotebook.segmento,\n      cnpj: insertNotebook.cnpj ?? null,\n      modelo: insertNotebook.modelo,\n      fornecedor: insertNotebook.fornecedor,\n      status: insertNotebook.status,\n      processador: insertNotebook.processador ?? null,\n      senhaAdmin: insertNotebook.senhaAdmin ?? null,\n      patrimonio: insertNotebook.patrimonio ?? null,\n      dataRecebimento: insertNotebook.dataRecebimento ?? null,\n      valor: insertNotebook.valor ?? null,\n      dataChecagem: insertNotebook.dataChecagem ?? null,\n      termoLink: insertNotebook.termoLink ?? null,\n      fotoLink: insertNotebook.fotoLink ?? null,\n      checklistTermo: insertNotebook.checklistTermo ?? false,\n      checklistAntivirus: insertNotebook.checklistAntivirus ?? false,\n      checklistFerramentaA: insertNotebook.checklistFerramentaA ?? false,\n      checklistFerramentaB: insertNotebook.checklistFerramentaB ?? false,\n      office: insertNotebook.office ?? null,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.notebooks.set(id, notebook);\n    return notebook;\n  }\n\n  async updateNotebook(id: string, updateData: Partial<InsertNotebook>): Promise<Notebook | undefined> {\n    const notebook = this.notebooks.get(id);\n    if (!notebook) return undefined;\n    const updated = { ...notebook, ...updateData, updatedAt: new Date() };\n    this.notebooks.set(id, updated);\n    return updated;\n  }\n\n  async deleteNotebook(id: string): Promise<boolean> {\n    return this.notebooks.delete(id);\n  }\n\n  async getAllNotebooks(): Promise<Notebook[]> {\n    return Array.from(this.notebooks.values());\n  }\n\n  // Celulares\n  async getCelular(id: string): Promise<Celular | undefined> {\n    return this.celulares.get(id);\n  }\n\n  async createCelular(insertCelular: InsertCelular): Promise<Celular> {\n    const id = randomUUID();\n    const now = new Date();\n    const celular: Celular = {\n      id,\n      responsavel: insertCelular.responsavel,\n      numeroCelular: insertCelular.numeroCelular,\n      uf: insertCelular.uf,\n      centroCusto: insertCelular.centroCusto ?? null,\n      segmento: insertCelular.segmento,\n      cnpj: insertCelular.cnpj ?? null,\n      modelo: insertCelular.modelo,\n      status: insertCelular.status,\n      emailLogin: insertCelular.emailLogin ?? null,\n      senhaLogin: insertCelular.senhaLogin ?? null,\n      emailSupervisao: insertCelular.emailSupervisao ?? null,\n      senhaSupervisao: insertCelular.senhaSupervisao ?? null,\n      imei: insertCelular.imei ?? null,\n      dataRecebimento: insertCelular.dataRecebimento ?? null,\n      valor: insertCelular.valor ?? null,\n      dataChecagem: insertCelular.dataChecagem ?? null,\n      termoLink: insertCelular.termoLink ?? null,\n      fotoLink: insertCelular.fotoLink ?? null,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.celulares.set(id, celular);\n    return celular;\n  }\n\n  async updateCelular(id: string, updateData: Partial<InsertCelular>): Promise<Celular | undefined> {\n    const celular = this.celulares.get(id);\n    if (!celular) return undefined;\n    const updated = { ...celular, ...updateData, updatedAt: new Date() };\n    this.celulares.set(id, updated);\n    return updated;\n  }\n\n  async deleteCelular(id: string): Promise<boolean> {\n    return this.celulares.delete(id);\n  }\n\n  async getAllCelulares(): Promise<Celular[]> {\n    return Array.from(this.celulares.values());\n  }\n\n  // Terminais\n  async getTerminal(id: string): Promise<Terminal | undefined> {\n    return this.terminais.get(id);\n  }\n\n  async createTerminal(insertTerminal: InsertTerminal): Promise<Terminal> {\n    const id = randomUUID();\n    const now = new Date();\n    const terminal: Terminal = {\n      id,\n      numeroRelogio: insertTerminal.numeroRelogio,\n      status: insertTerminal.status,\n      uf: insertTerminal.uf,\n      segmento: insertTerminal.segmento,\n      centroCusto: insertTerminal.centroCusto ?? null,\n      statusNext: insertTerminal.statusNext ?? null,\n      observacao: insertTerminal.observacao ?? null,\n      dataChecagem: insertTerminal.dataChecagem ?? null,\n      termoLink: insertTerminal.termoLink ?? null,\n      fotoLink: insertTerminal.fotoLink ?? null,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.terminais.set(id, terminal);\n    return terminal;\n  }\n\n  async updateTerminal(id: string, updateData: Partial<InsertTerminal>): Promise<Terminal | undefined> {\n    const terminal = this.terminais.get(id);\n    if (!terminal) return undefined;\n    const updated = { ...terminal, ...updateData, updatedAt: new Date() };\n    this.terminais.set(id, updated);\n    return updated;\n  }\n\n  async deleteTerminal(id: string): Promise<boolean> {\n    return this.terminais.delete(id);\n  }\n\n  async getAllTerminais(): Promise<Terminal[]> {\n    return Array.from(this.terminais.values());\n  }\n\n  // Histórico\n  async createHistorico(insertHistorico: InsertHistorico): Promise<Historico> {\n    const id = randomUUID();\n    const historico: Historico = {\n      id,\n      action: insertHistorico.action,\n      userId: insertHistorico.userId,\n      userName: insertHistorico.userName,\n      equipmentType: insertHistorico.equipmentType,\n      equipmentId: insertHistorico.equipmentId ?? null,\n      details: insertHistorico.details,\n      equipment: insertHistorico.equipment ?? null,\n      timestamp: new Date(),\n    };\n    this.historico.set(id, historico);\n    return historico;\n  }\n\n  async getAllHistorico(): Promise<Historico[]> {\n    return Array.from(this.historico.values()).sort((a, b) => \n      b.timestamp.getTime() - a.timestamp.getTime()\n    );\n  }\n\n  async getHistoricoByEquipment(equipmentId: string): Promise<Historico[]> {\n    return Array.from(this.historico.values())\n      .filter((h) => h.equipmentId === equipmentId)\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n  }\n}\n\n// DatabaseStorage implementation using Drizzle ORM\nexport class DatabaseStorage implements IStorage {\n  // Usuários\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const [user] = await db\n      .insert(users)\n      .values({\n        id,\n        nome: insertUser.nome,\n        email: insertUser.email,\n        senha: insertUser.senha,\n        perfil: insertUser.perfil,\n        ativo: insertUser.ativo ?? true,\n        createdAt: new Date(),\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, updateData: Partial<InsertUser>): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set(updateData)\n      .where(eq(users.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    const result = await db.delete(users).where(eq(users.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  // Notebooks\n  async getNotebook(id: string): Promise<Notebook | undefined> {\n    const [notebook] = await db.select().from(notebooks).where(eq(notebooks.id, id));\n    return notebook || undefined;\n  }\n\n  async createNotebook(insertNotebook: InsertNotebook): Promise<Notebook> {\n    const id = randomUUID();\n    const now = new Date();\n    const [notebook] = await db\n      .insert(notebooks)\n      .values({\n        id,\n        responsavel: insertNotebook.responsavel,\n        uf: insertNotebook.uf,\n        centroCusto: insertNotebook.centroCusto ?? null,\n        segmento: insertNotebook.segmento,\n        cnpj: insertNotebook.cnpj ?? null,\n        modelo: insertNotebook.modelo,\n        fornecedor: insertNotebook.fornecedor,\n        status: insertNotebook.status,\n        processador: insertNotebook.processador ?? null,\n        senhaAdmin: insertNotebook.senhaAdmin ?? null,\n        patrimonio: insertNotebook.patrimonio ?? null,\n        dataRecebimento: insertNotebook.dataRecebimento ?? null,\n        valor: insertNotebook.valor ?? null,\n        dataChecagem: insertNotebook.dataChecagem ?? null,\n        termoLink: insertNotebook.termoLink ?? null,\n        fotoLink: insertNotebook.fotoLink ?? null,\n        checklistTermo: insertNotebook.checklistTermo ?? false,\n        checklistAntivirus: insertNotebook.checklistAntivirus ?? false,\n        checklistFerramentaA: insertNotebook.checklistFerramentaA ?? false,\n        checklistFerramentaB: insertNotebook.checklistFerramentaB ?? false,\n        office: insertNotebook.office ?? null,\n        createdAt: now,\n        updatedAt: now,\n      })\n      .returning();\n    return notebook;\n  }\n\n  async updateNotebook(id: string, updateData: Partial<InsertNotebook>): Promise<Notebook | undefined> {\n    const [notebook] = await db\n      .update(notebooks)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(notebooks.id, id))\n      .returning();\n    return notebook || undefined;\n  }\n\n  async deleteNotebook(id: string): Promise<boolean> {\n    const result = await db.delete(notebooks).where(eq(notebooks.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  async getAllNotebooks(): Promise<Notebook[]> {\n    return await db.select().from(notebooks);\n  }\n\n  // Celulares\n  async getCelular(id: string): Promise<Celular | undefined> {\n    const [celular] = await db.select().from(celulares).where(eq(celulares.id, id));\n    return celular || undefined;\n  }\n\n  async createCelular(insertCelular: InsertCelular): Promise<Celular> {\n    const id = randomUUID();\n    const now = new Date();\n    const [celular] = await db\n      .insert(celulares)\n      .values({\n        id,\n        responsavel: insertCelular.responsavel,\n        numeroCelular: insertCelular.numeroCelular,\n        uf: insertCelular.uf,\n        centroCusto: insertCelular.centroCusto ?? null,\n        segmento: insertCelular.segmento,\n        cnpj: insertCelular.cnpj ?? null,\n        modelo: insertCelular.modelo,\n        status: insertCelular.status,\n        emailLogin: insertCelular.emailLogin ?? null,\n        senhaLogin: insertCelular.senhaLogin ?? null,\n        emailSupervisao: insertCelular.emailSupervisao ?? null,\n        senhaSupervisao: insertCelular.senhaSupervisao ?? null,\n        imei: insertCelular.imei ?? null,\n        dataRecebimento: insertCelular.dataRecebimento ?? null,\n        valor: insertCelular.valor ?? null,\n        dataChecagem: insertCelular.dataChecagem ?? null,\n        termoLink: insertCelular.termoLink ?? null,\n        fotoLink: insertCelular.fotoLink ?? null,\n        createdAt: now,\n        updatedAt: now,\n      })\n      .returning();\n    return celular;\n  }\n\n  async updateCelular(id: string, updateData: Partial<InsertCelular>): Promise<Celular | undefined> {\n    const [celular] = await db\n      .update(celulares)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(celulares.id, id))\n      .returning();\n    return celular || undefined;\n  }\n\n  async deleteCelular(id: string): Promise<boolean> {\n    const result = await db.delete(celulares).where(eq(celulares.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  async getAllCelulares(): Promise<Celular[]> {\n    return await db.select().from(celulares);\n  }\n\n  // Terminais\n  async getTerminal(id: string): Promise<Terminal | undefined> {\n    const [terminal] = await db.select().from(terminais).where(eq(terminais.id, id));\n    return terminal || undefined;\n  }\n\n  async createTerminal(insertTerminal: InsertTerminal): Promise<Terminal> {\n    const id = randomUUID();\n    const now = new Date();\n    const [terminal] = await db\n      .insert(terminais)\n      .values({\n        id,\n        numeroRelogio: insertTerminal.numeroRelogio,\n        status: insertTerminal.status,\n        uf: insertTerminal.uf,\n        segmento: insertTerminal.segmento,\n        centroCusto: insertTerminal.centroCusto ?? null,\n        statusNext: insertTerminal.statusNext ?? null,\n        observacao: insertTerminal.observacao ?? null,\n        dataChecagem: insertTerminal.dataChecagem ?? null,\n        termoLink: insertTerminal.termoLink ?? null,\n        fotoLink: insertTerminal.fotoLink ?? null,\n        createdAt: now,\n        updatedAt: now,\n      })\n      .returning();\n    return terminal;\n  }\n\n  async updateTerminal(id: string, updateData: Partial<InsertTerminal>): Promise<Terminal | undefined> {\n    const [terminal] = await db\n      .update(terminais)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(terminais.id, id))\n      .returning();\n    return terminal || undefined;\n  }\n\n  async deleteTerminal(id: string): Promise<boolean> {\n    const result = await db.delete(terminais).where(eq(terminais.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  async getAllTerminais(): Promise<Terminal[]> {\n    return await db.select().from(terminais);\n  }\n\n  // Histórico\n  async createHistorico(insertHistorico: InsertHistorico): Promise<Historico> {\n    const id = randomUUID();\n    const [hist] = await db\n      .insert(historico)\n      .values({\n        id,\n        action: insertHistorico.action,\n        userId: insertHistorico.userId,\n        userName: insertHistorico.userName,\n        equipmentType: insertHistorico.equipmentType,\n        equipmentId: insertHistorico.equipmentId ?? null,\n        details: insertHistorico.details,\n        equipment: insertHistorico.equipment ?? null,\n        timestamp: new Date(),\n      })\n      .returning();\n    return hist;\n  }\n\n  async getAllHistorico(): Promise<Historico[]> {\n    return await db.select().from(historico).orderBy(desc(historico.timestamp));\n  }\n\n  async getHistoricoByEquipment(equipmentId: string): Promise<Historico[]> {\n    return await db\n      .select()\n      .from(historico)\n      .where(eq(historico.equipmentId, equipmentId))\n      .orderBy(desc(historico.timestamp));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":18300},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, boolean, timestamp, decimal, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Tabela de usuários\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  nome: text(\"nome\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  senha: text(\"senha\").notNull(),\n  perfil: text(\"perfil\").notNull(), // Admin, Suporte, Controle\n  ativo: boolean(\"ativo\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// Tabela de notebooks\nexport const notebooks = pgTable(\"notebooks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  responsavel: text(\"responsavel\").notNull(),\n  uf: text(\"uf\").notNull(),\n  centroCusto: text(\"centro_custo\"),\n  segmento: text(\"segmento\").notNull(),\n  cnpj: text(\"cnpj\"),\n  modelo: text(\"modelo\").notNull(),\n  fornecedor: text(\"fornecedor\").notNull(), // MAGNA, OPUS, ONLY, ALLU\n  status: text(\"status\").notNull(), // EM USO, DEVOLVER, CORREIO, GUARDADO\n  processador: text(\"processador\"),\n  office: text(\"office\"),\n  senhaAdmin: text(\"senha_admin\"),\n  patrimonio: text(\"patrimonio\"),\n  dataRecebimento: text(\"data_recebimento\"),\n  valor: decimal(\"valor\", { precision: 10, scale: 2 }),\n  dataChecagem: text(\"data_checagem\"),\n  termoLink: text(\"termo_link\"),\n  fotoLink: text(\"foto_link\"),\n  checklistTermo: boolean(\"checklist_termo\").default(false),\n  checklistAntivirus: boolean(\"checklist_antivirus\").default(false),\n  checklistFerramentaA: boolean(\"checklist_ferramenta_a\").default(false),\n  checklistFerramentaB: boolean(\"checklist_ferramenta_b\").default(false),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\nexport const insertNotebookSchema = createInsertSchema(notebooks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertNotebook = z.infer<typeof insertNotebookSchema>;\nexport type Notebook = typeof notebooks.$inferSelect;\n\n// Tabela de celulares\nexport const celulares = pgTable(\"celulares\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  responsavel: text(\"responsavel\").notNull(),\n  numeroCelular: text(\"numero_celular\").notNull(),\n  uf: text(\"uf\").notNull(),\n  centroCusto: text(\"centro_custo\"),\n  segmento: text(\"segmento\").notNull(),\n  cnpj: text(\"cnpj\"),\n  modelo: text(\"modelo\").notNull(),\n  status: text(\"status\").notNull(), // EM USO, DEVOLVER, CORREIO, GUARDADO\n  emailLogin: text(\"email_login\"),\n  senhaLogin: text(\"senha_login\"),\n  emailSupervisao: text(\"email_supervisao\"),\n  senhaSupervisao: text(\"senha_supervisao\"),\n  imei: text(\"imei\"),\n  dataRecebimento: text(\"data_recebimento\"),\n  valor: decimal(\"valor\", { precision: 10, scale: 2 }),\n  dataChecagem: text(\"data_checagem\"),\n  termoLink: text(\"termo_link\"),\n  fotoLink: text(\"foto_link\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\nexport const insertCelularSchema = createInsertSchema(celulares).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertCelular = z.infer<typeof insertCelularSchema>;\nexport type Celular = typeof celulares.$inferSelect;\n\n// Tabela de terminais\nexport const terminais = pgTable(\"terminais\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  numeroRelogio: text(\"numero_relogio\").notNull(),\n  status: text(\"status\").notNull(), // EM USO, DEVOLVER, CORREIO, GUARDADO, TROCA\n  uf: text(\"uf\").notNull(),\n  segmento: text(\"segmento\").notNull(),\n  centroCusto: text(\"centro_custo\"),\n  statusNext: text(\"status_next\"),\n  observacao: text(\"observacao\"),\n  dataChecagem: text(\"data_checagem\"),\n  termoLink: text(\"termo_link\"),\n  fotoLink: text(\"foto_link\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\nexport const insertTerminalSchema = createInsertSchema(terminais).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertTerminal = z.infer<typeof insertTerminalSchema>;\nexport type Terminal = typeof terminais.$inferSelect;\n\n// Tabela de histórico\nexport const historico = pgTable(\"historico\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  action: text(\"action\").notNull(), // criacao, edicao, exclusao\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  userName: text(\"user_name\").notNull(),\n  equipmentType: text(\"equipment_type\").notNull(), // notebook, celular, terminal\n  equipmentId: varchar(\"equipment_id\"),\n  details: text(\"details\").notNull(),\n  equipment: text(\"equipment\"),\n  timestamp: timestamp(\"timestamp\").notNull().default(sql`now()`),\n});\n\nexport const insertHistoricoSchema = createInsertSchema(historico).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport type InsertHistorico = z.infer<typeof insertHistoricoSchema>;\nexport type Historico = typeof historico.$inferSelect;\n","size_bytes":5332},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AuthProvider, useAuth } from \"@/contexts/AuthContext\";\nimport { ThemeProvider } from \"@/contexts/ThemeContext\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport AppSidebar from \"@/components/AppSidebar\";\nimport Login from \"@/pages/Login\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Inventario from \"@/pages/Inventario\";\nimport CadastroEquipamento from \"@/pages/CadastroEquipamento\";\nimport Historico from \"@/pages/Historico\";\nimport GestaoUsuarios from \"@/pages/GestaoUsuarios\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { user, logout } = useAuth();\n  \n  if (!user) return null;\n  \n  const userRole = user.perfil as \"Admin\" | \"Suporte\" | \"Controle\";\n  \n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      {userRole !== \"Controle\" && (\n        <>\n          <Route path=\"/inventario\">\n            {() => <Inventario userRole={userRole} />}\n          </Route>\n          <Route path=\"/cadastro\" component={CadastroEquipamento} />\n        </>\n      )}\n      {userRole === \"Admin\" && (\n        <Route path=\"/usuarios\" component={GestaoUsuarios} />\n      )}\n      <Route path=\"/historico\" component={Historico} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction AppContent() {\n  const { user, logout, isLoading } = useAuth();\n  \n  const style = {\n    \"--sidebar-width\": \"16rem\",\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <p className=\"text-muted-foreground\">Carregando...</p>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <Login />;\n  }\n\n  const userRole = user.perfil as \"Admin\" | \"Suporte\" | \"Controle\";\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar userRole={userRole} onLogout={logout} />\n        <div className=\"flex flex-col flex-1\">\n          <header className=\"flex items-center justify-between p-4 border-b\">\n            <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n            <div className=\"flex items-center gap-4\">\n              <div className=\"text-sm text-muted-foreground\">\n                <span className=\"font-medium text-foreground\">{user.nome}</span> - {userRole}\n              </div>\n              <ThemeToggle />\n            </div>\n          </header>\n          <main className=\"flex-1 overflow-auto p-8\">\n            <Router />\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <AuthProvider>\n            <AppContent />\n            <Toaster />\n          </AuthProvider>\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":3221},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 210 15% 20%;\n\n  --border: 210 20% 88%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 210 15% 20%;\n\n  --card-border: 210 20% 94%;\n\n  --sidebar: 210 20% 96%;\n\n  --sidebar-foreground: 210 15% 20%;\n\n  --sidebar-border: 210 20% 92%;\n\n  --sidebar-primary: 210 85% 45%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 210 20% 93%;\n\n  --sidebar-accent-foreground: 210 15% 20%;\n\n  --sidebar-ring: 210 85% 45%;\n\n  --popover: 0 0% 100%;\n\n  --popover-foreground: 210 15% 20%;\n\n  --popover-border: 210 20% 90%;\n\n  --primary: 210 85% 45%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 210 20% 96%;\n\n  --secondary-foreground: 210 15% 20%;\n\n  --muted: 210 15% 94%;\n\n  --muted-foreground: 210 10% 45%;\n\n  --accent: 210 20% 95%;\n\n  --accent-foreground: 210 15% 20%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 210 25% 75%;\n  --ring: 210 85% 45%;\n  --chart-1: 210 85% 45%;\n  --chart-2: 142 76% 36%;\n  --chart-3: 38 92% 50%;\n  --chart-4: 280 65% 55%;\n  --chart-5: 210 20% 50%;\n\n  --font-sans: Inter, system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(210 20% 20% / 0.03);\n  --shadow-xs: 0px 1px 3px 0px hsl(210 20% 20% / 0.05);\n  --shadow-sm: 0px 2px 4px 0px hsl(210 20% 20% / 0.04), 0px 1px 2px -1px hsl(210 20% 20% / 0.03);\n  --shadow: 0px 4px 6px 0px hsl(210 20% 20% / 0.05), 0px 2px 4px -1px hsl(210 20% 20% / 0.03);\n  --shadow-md: 0px 6px 10px 0px hsl(210 20% 20% / 0.06), 0px 2px 4px -1px hsl(210 20% 20% / 0.03);\n  --shadow-lg: 0px 10px 15px 0px hsl(210 20% 20% / 0.08), 0px 4px 6px -2px hsl(210 20% 20% / 0.03);\n  --shadow-xl: 0px 20px 25px 0px hsl(210 20% 20% / 0.10), 0px 8px 10px -6px hsl(210 20% 20% / 0.04);\n  --shadow-2xl: 0px 25px 50px 0px hsl(210 20% 20% / 0.15);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 210 15% 12%;\n\n  --foreground: 210 10% 95%;\n\n  --border: 210 15% 24%;\n\n  --card: 210 15% 16%;\n\n  --card-foreground: 210 10% 95%;\n\n  --card-border: 210 15% 20%;\n\n  --sidebar: 210 15% 14%;\n\n  --sidebar-foreground: 210 10% 95%;\n\n  --sidebar-border: 210 15% 18%;\n\n  --sidebar-primary: 210 90% 60%;\n\n  --sidebar-primary-foreground: 210 15% 10%;\n\n  --sidebar-accent: 210 18% 18%;\n\n  --sidebar-accent-foreground: 210 10% 95%;\n\n  --sidebar-ring: 210 90% 60%;\n\n  --popover: 210 15% 16%;\n\n  --popover-foreground: 210 10% 95%;\n\n  --popover-border: 210 15% 20%;\n\n  --primary: 210 90% 55%;\n\n  --primary-foreground: 210 15% 10%;\n\n  --secondary: 210 18% 20%;\n\n  --secondary-foreground: 210 10% 95%;\n\n  --muted: 210 15% 18%;\n\n  --muted-foreground: 210 10% 65%;\n\n  --accent: 210 18% 20%;\n\n  --accent-foreground: 210 10% 95%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 210 20% 35%;\n  --ring: 210 90% 60%;\n  --chart-1: 210 90% 65%;\n  --chart-2: 142 76% 55%;\n  --chart-3: 38 92% 60%;\n  --chart-4: 280 65% 70%;\n  --chart-5: 210 20% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(210 20% 5% / 0.20);\n  --shadow-xs: 0px 1px 3px 0px hsl(210 20% 5% / 0.30);\n  --shadow-sm: 0px 2px 4px 0px hsl(210 20% 5% / 0.25), 0px 1px 2px -1px hsl(210 20% 5% / 0.20);\n  --shadow: 0px 4px 6px 0px hsl(210 20% 5% / 0.30), 0px 2px 4px -1px hsl(210 20% 5% / 0.25);\n  --shadow-md: 0px 6px 10px 0px hsl(210 20% 5% / 0.35), 0px 2px 4px -1px hsl(210 20% 5% / 0.25);\n  --shadow-lg: 0px 10px 15px 0px hsl(210 20% 5% / 0.40), 0px 4px 6px -2px hsl(210 20% 5% / 0.30);\n  --shadow-xl: 0px 20px 25px 0px hsl(210 20% 5% / 0.45), 0px 8px 10px -6px hsl(210 20% 5% / 0.35);\n  --shadow-2xl: 0px 25px 50px 0px hsl(210 20% 5% / 0.50);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11297},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AppSidebar.tsx":{"content":"import { LayoutDashboard, Package, History, Users, Plus, LogOut } from \"lucide-react\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarFooter,\n} from \"@/components/ui/sidebar\";\nimport { Link, useLocation } from \"wouter\";\n\ninterface AppSidebarProps {\n  userRole?: \"Admin\" | \"Suporte\" | \"Controle\";\n  onLogout?: () => void;\n}\n\nexport default function AppSidebar({ userRole = \"Admin\", onLogout }: AppSidebarProps) {\n  const [location] = useLocation();\n\n  const menuItems = [\n    ...(userRole === \"Controle\" ? [\n      { title: \"Dashboard\", url: \"/dashboard\", icon: LayoutDashboard },\n    ] : []),\n    ...(userRole !== \"Controle\" ? [\n      { title: \"Inventário\", url: \"/inventario\", icon: Package },\n      { title: \"Cadastrar Equipamento\", url: \"/cadastro\", icon: Plus },\n    ] : []),\n    ...(userRole === \"Admin\" ? [\n      { title: \"Dashboard\", url: \"/dashboard\", icon: LayoutDashboard },\n      { title: \"Gestão de Usuários\", url: \"/usuarios\", icon: Users },\n    ] : []),\n    { title: \"Histórico\", url: \"/historico\", icon: History },\n  ];\n\n  return (\n    <Sidebar>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel className=\"text-base font-semibold\">\n            Sistema de Inventário\n          </SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton\n                    asChild\n                    isActive={location === item.url}\n                    data-testid={`link-${item.title.toLowerCase().replace(/\\s/g, '-')}`}\n                  >\n                    <Link href={item.url}>\n                      <item.icon className=\"w-4 h-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n      <SidebarFooter>\n        <SidebarMenu>\n          <SidebarMenuItem>\n            <SidebarMenuButton\n              onClick={onLogout}\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"w-4 h-4\" />\n              <span>Sair</span>\n            </SidebarMenuButton>\n          </SidebarMenuItem>\n        </SidebarMenu>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n","size_bytes":2508},"client/src/components/CelularForm.tsx":{"content":"import { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\ninterface CelularFormData {\n  responsavel: string;\n  numeroCelular: string;\n  uf: string;\n  centroCusto: string;\n  segmento: string;\n  cnpj: string;\n  modelo: string;\n  status: string;\n  emailLogin: string;\n  senhaLogin: string;\n  emailSupervisao: string;\n  senhaSupervisao: string;\n  imei: string;\n  dataRecebimento: string;\n  valor: string;\n  dataChecagem: string;\n  termoLink: string;\n  fotoLink: string;\n}\n\ninterface CelularFormProps {\n  data: Partial<CelularFormData>;\n  onChange: (data: Partial<CelularFormData>) => void;\n}\n\nexport default function CelularForm({ data, onChange }: CelularFormProps) {\n  const updateField = (field: keyof CelularFormData, value: any) => {\n    onChange({ ...data, [field]: value });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Informações Básicas</CardTitle>\n        </CardHeader>\n        <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"responsavel\">Responsável *</Label>\n            <Input\n              id=\"responsavel\"\n              value={data.responsavel || \"\"}\n              onChange={(e) => updateField(\"responsavel\", e.target.value)}\n              data-testid=\"input-responsavel\"\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"numeroCelular\">Número do Celular *</Label>\n            <Input\n              id=\"numeroCelular\"\n              type=\"tel\"\n              value={data.numeroCelular || \"\"}\n              onChange={(e) => updateField(\"numeroCelular\", e.target.value)}\n              data-testid=\"input-numero-celular\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"uf\">UF *</Label>\n            <Select value={data.uf} onValueChange={(val) => updateField(\"uf\", val)}>\n              <SelectTrigger id=\"uf\" data-testid=\"select-uf\">\n                <SelectValue placeholder=\"Selecione\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"SP\">SP</SelectItem>\n                <SelectItem value=\"RJ\">RJ</SelectItem>\n                <SelectItem value=\"MG\">MG</SelectItem>\n                <SelectItem value=\"RS\">RS</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"centroCusto\">Centro de Custo</Label>\n            <Input\n              id=\"centroCusto\"\n              value={data.centroCusto || \"\"}\n              onChange={(e) => updateField(\"centroCusto\", e.target.value)}\n              data-testid=\"input-centro-custo\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"segmento\">Segmento *</Label>\n            <Input\n              id=\"segmento\"\n              value={data.segmento || \"\"}\n              onChange={(e) => updateField(\"segmento\", e.target.value)}\n              data-testid=\"input-segmento\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"cnpj\">CNPJ</Label>\n            <Input\n              id=\"cnpj\"\n              value={data.cnpj || \"\"}\n              onChange={(e) => updateField(\"cnpj\", e.target.value)}\n              data-testid=\"input-cnpj\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Dados do Equipamento</CardTitle>\n        </CardHeader>\n        <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"modelo\">Modelo *</Label>\n            <Input\n              id=\"modelo\"\n              value={data.modelo || \"\"}\n              onChange={(e) => updateField(\"modelo\", e.target.value)}\n              data-testid=\"input-modelo\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"status\">Status *</Label>\n            <Select value={data.status} onValueChange={(val) => updateField(\"status\", val)}>\n              <SelectTrigger id=\"status\" data-testid=\"select-status\">\n                <SelectValue placeholder=\"Selecione\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"EM USO\">EM USO</SelectItem>\n                <SelectItem value=\"DEVOLVER\">DEVOLVER</SelectItem>\n                <SelectItem value=\"CORREIO\">CORREIO</SelectItem>\n                <SelectItem value=\"GUARDADO\">GUARDADO</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"imei\">IMEI</Label>\n            <Input\n              id=\"imei\"\n              className=\"font-mono\"\n              value={data.imei || \"\"}\n              onChange={(e) => updateField(\"imei\", e.target.value)}\n              data-testid=\"input-imei\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"dataRecebimento\">Data de Recebimento</Label>\n            <Input\n              id=\"dataRecebimento\"\n              type=\"date\"\n              value={data.dataRecebimento || \"\"}\n              onChange={(e) => updateField(\"dataRecebimento\", e.target.value)}\n              data-testid=\"input-data-recebimento\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"valor\">Valor do Equipamento</Label>\n            <Input\n              id=\"valor\"\n              type=\"number\"\n              step=\"0.01\"\n              value={data.valor || \"\"}\n              onChange={(e) => updateField(\"valor\", e.target.value)}\n              data-testid=\"input-valor\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"dataChecagem\">Data de Checagem</Label>\n            <Input\n              id=\"dataChecagem\"\n              type=\"date\"\n              value={data.dataChecagem || \"\"}\n              onChange={(e) => updateField(\"dataChecagem\", e.target.value)}\n              data-testid=\"input-data-checagem\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Credenciais de Acesso</CardTitle>\n        </CardHeader>\n        <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"emailLogin\">Email de Login</Label>\n            <Input\n              id=\"emailLogin\"\n              type=\"email\"\n              value={data.emailLogin || \"\"}\n              onChange={(e) => updateField(\"emailLogin\", e.target.value)}\n              data-testid=\"input-email-login\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"senhaLogin\">Senha de Login</Label>\n            <Input\n              id=\"senhaLogin\"\n              type=\"password\"\n              value={data.senhaLogin || \"\"}\n              onChange={(e) => updateField(\"senhaLogin\", e.target.value)}\n              data-testid=\"input-senha-login\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"emailSupervisao\">Email de Supervisão</Label>\n            <Input\n              id=\"emailSupervisao\"\n              type=\"email\"\n              value={data.emailSupervisao || \"\"}\n              onChange={(e) => updateField(\"emailSupervisao\", e.target.value)}\n              data-testid=\"input-email-supervisao\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"senhaSupervisao\">Senha de Supervisão</Label>\n            <Input\n              id=\"senhaSupervisao\"\n              type=\"password\"\n              value={data.senhaSupervisao || \"\"}\n              onChange={(e) => updateField(\"senhaSupervisao\", e.target.value)}\n              data-testid=\"input-senha-supervisao\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Documentação</CardTitle>\n        </CardHeader>\n        <CardContent className=\"grid grid-cols-1 gap-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"termoLink\">Link do Termo</Label>\n            <Input\n              id=\"termoLink\"\n              type=\"url\"\n              placeholder=\"https://...\"\n              value={data.termoLink || \"\"}\n              onChange={(e) => updateField(\"termoLink\", e.target.value)}\n              data-testid=\"input-termo-link\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"fotoLink\">Link da Foto do Equipamento</Label>\n            <Input\n              id=\"fotoLink\"\n              type=\"url\"\n              placeholder=\"https://...\"\n              value={data.fotoLink || \"\"}\n              onChange={(e) => updateField(\"fotoLink\", e.target.value)}\n              data-testid=\"input-foto-link\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9227},"client/src/components/DashboardCharts.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, Legend } from \"recharts\";\n\nconst COLORS = [\n  \"hsl(var(--chart-1))\",\n  \"hsl(var(--chart-2))\",\n  \"hsl(var(--chart-3))\",\n  \"hsl(var(--chart-4))\",\n  \"hsl(var(--chart-5))\",\n];\n\ninterface DashboardChartsProps {\n  statusData: Array<{ name: string; value: number }>;\n  ufData: Array<{ name: string; value: number }>;\n}\n\nexport default function DashboardCharts({ statusData, ufData }: DashboardChartsProps) {\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Equipamentos por Status</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={statusData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n              <XAxis dataKey=\"name\" stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n              <YAxis stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n              <Tooltip\n                contentStyle={{\n                  backgroundColor: \"hsl(var(--popover))\",\n                  border: \"1px solid hsl(var(--border))\",\n                  borderRadius: \"var(--radius)\",\n                }}\n              />\n              <Bar dataKey=\"value\" fill=\"hsl(var(--primary))\" radius={[4, 4, 0, 0]} />\n            </BarChart>\n          </ResponsiveContainer>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Distribuição por UF</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <PieChart>\n              <Pie\n                data={ufData}\n                cx=\"50%\"\n                cy=\"50%\"\n                labelLine={false}\n                label={({ name, percent }) => `${name} (${(percent * 100).toFixed(0)}%)`}\n                outerRadius={80}\n                fill=\"#8884d8\"\n                dataKey=\"value\"\n              >\n                {ufData.map((_, index) => (\n                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                ))}\n              </Pie>\n              <Tooltip\n                contentStyle={{\n                  backgroundColor: \"hsl(var(--popover))\",\n                  border: \"1px solid hsl(var(--border))\",\n                  borderRadius: \"var(--radius)\",\n                }}\n              />\n              <Legend />\n            </PieChart>\n          </ResponsiveContainer>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":2691},"client/src/components/DashboardStats.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Laptop, TrendingUp, MapPin } from \"lucide-react\";\n\ninterface StatCardProps {\n  title: string;\n  value: string | number;\n  icon: React.ReactNode;\n  description?: string;\n}\n\nfunction StatCard({ title, value, icon, description }: StatCardProps) {\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium text-muted-foreground\">{title}</CardTitle>\n        <div className=\"text-muted-foreground\">{icon}</div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\" data-testid={`stat-value-${title.toLowerCase().replace(/\\s/g, '-')}`}>\n          {value}\n        </div>\n        {description && <p className=\"text-xs text-muted-foreground mt-1\">{description}</p>}\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface DashboardStatsProps {\n  totalEquipment: number;\n  byStatus: Record<string, number>;\n  byUF: Record<string, number>;\n}\n\nexport default function DashboardStats({ totalEquipment, byStatus, byUF }: DashboardStatsProps) {\n  const emUso = byStatus[\"EM USO\"] || 0;\n  const topUF = Object.entries(byUF).sort((a, b) => b[1] - a[1])[0];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n      <StatCard\n        title=\"Total de Equipamentos\"\n        value={totalEquipment}\n        icon={<Laptop className=\"w-4 h-4\" />}\n        description=\"Todos os equipamentos cadastrados\"\n      />\n      <StatCard\n        title=\"Em Uso\"\n        value={emUso}\n        icon={<TrendingUp className=\"w-4 h-4\" />}\n        description={`${Math.round((emUso / totalEquipment) * 100)}% do total`}\n      />\n      <StatCard\n        title=\"Principal UF\"\n        value={topUF ? topUF[0] : \"-\"}\n        icon={<MapPin className=\"w-4 h-4\" />}\n        description={topUF ? `${topUF[1]} equipamentos` : \"\"}\n      />\n    </div>\n  );\n}\n","size_bytes":1950},"client/src/components/EquipmentFilters.tsx":{"content":"import { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Search } from \"lucide-react\";\n\ninterface EquipmentFiltersProps {\n  onSearchChange: (value: string) => void;\n  onStatusChange: (value: string) => void;\n  onUFChange: (value: string) => void;\n  onSegmentoChange: (value: string) => void;\n  onFornecedorChange?: (value: string) => void;\n  showFornecedor?: boolean;\n}\n\nexport default function EquipmentFilters({\n  onSearchChange,\n  onStatusChange,\n  onUFChange,\n  onSegmentoChange,\n  onFornecedorChange,\n  showFornecedor = false,\n}: EquipmentFiltersProps) {\n  return (\n    <div className=\"flex flex-wrap gap-4 items-center\">\n      <div className=\"relative flex-1 min-w-[200px]\">\n        <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n        <Input\n          placeholder=\"Buscar equipamentos...\"\n          className=\"pl-9\"\n          onChange={(e) => onSearchChange(e.target.value)}\n          data-testid=\"input-search-equipment\"\n        />\n      </div>\n      \n      <Select onValueChange={onStatusChange}>\n        <SelectTrigger className=\"w-[180px]\" data-testid=\"select-status-filter\">\n          <SelectValue placeholder=\"Status\" />\n        </SelectTrigger>\n        <SelectContent>\n          <SelectItem value=\"all\">Todos</SelectItem>\n          <SelectItem value=\"EM USO\">Em Uso</SelectItem>\n          <SelectItem value=\"DEVOLVER\">Devolver</SelectItem>\n          <SelectItem value=\"CORREIO\">Correio</SelectItem>\n          <SelectItem value=\"GUARDADO\">Guardado</SelectItem>\n          <SelectItem value=\"TROCA\">Troca</SelectItem>\n        </SelectContent>\n      </Select>\n\n      <Select onValueChange={onUFChange}>\n        <SelectTrigger className=\"w-[120px]\" data-testid=\"select-uf-filter\">\n          <SelectValue placeholder=\"UF\" />\n        </SelectTrigger>\n        <SelectContent>\n          <SelectItem value=\"all\">Todas</SelectItem>\n          <SelectItem value=\"SP\">SP</SelectItem>\n          <SelectItem value=\"RJ\">RJ</SelectItem>\n          <SelectItem value=\"MG\">MG</SelectItem>\n          <SelectItem value=\"RS\">RS</SelectItem>\n        </SelectContent>\n      </Select>\n\n      <Select onValueChange={onSegmentoChange}>\n        <SelectTrigger className=\"w-[160px]\" data-testid=\"select-segmento-filter\">\n          <SelectValue placeholder=\"Segmento\" />\n        </SelectTrigger>\n        <SelectContent>\n          <SelectItem value=\"all\">Todos</SelectItem>\n          <SelectItem value=\"TI\">TI</SelectItem>\n          <SelectItem value=\"Vendas\">Vendas</SelectItem>\n          <SelectItem value=\"Administrativo\">Administrativo</SelectItem>\n        </SelectContent>\n      </Select>\n\n      {showFornecedor && onFornecedorChange && (\n        <Select onValueChange={onFornecedorChange}>\n          <SelectTrigger className=\"w-[140px]\" data-testid=\"select-fornecedor-filter\">\n            <SelectValue placeholder=\"Fornecedor\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">Todos</SelectItem>\n            <SelectItem value=\"MAGNA\">MAGNA</SelectItem>\n            <SelectItem value=\"OPUS\">OPUS</SelectItem>\n            <SelectItem value=\"ONLY\">ONLY</SelectItem>\n            <SelectItem value=\"ALLU\">ALLU</SelectItem>\n          </SelectContent>\n        </Select>\n      )}\n    </div>\n  );\n}\n","size_bytes":3371},"client/src/components/EquipmentTable.tsx":{"content":"import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Eye, Pencil, Trash2 } from \"lucide-react\";\nimport StatusBadge from \"./StatusBadge\";\n\ninterface Equipment {\n  id: string;\n  tipo: string;\n  responsavel: string;\n  modelo: string;\n  status: string;\n  uf: string;\n  segmento: string;\n}\n\ninterface EquipmentTableProps {\n  equipment: Equipment[];\n  onView: (id: string) => void;\n  onEdit: (id: string) => void;\n  onDelete: (id: string) => void;\n  canEdit?: boolean;\n  canDelete?: boolean;\n}\n\nexport default function EquipmentTable({\n  equipment,\n  onView,\n  onEdit,\n  onDelete,\n  canEdit = true,\n  canDelete = true,\n}: EquipmentTableProps) {\n  return (\n    <div className=\"rounded-lg border\">\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead>Tipo</TableHead>\n            <TableHead>Responsável</TableHead>\n            <TableHead>Modelo</TableHead>\n            <TableHead>Status</TableHead>\n            <TableHead>UF</TableHead>\n            <TableHead>Segmento</TableHead>\n            <TableHead className=\"text-right\">Ações</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {equipment.length === 0 ? (\n            <TableRow>\n              <TableCell colSpan={7} className=\"text-center text-muted-foreground py-8\">\n                Nenhum equipamento encontrado\n              </TableCell>\n            </TableRow>\n          ) : (\n            equipment.map((item) => (\n              <TableRow key={item.id} className=\"hover-elevate\" data-testid={`row-equipment-${item.id}`}>\n                <TableCell className=\"font-medium\">{item.tipo}</TableCell>\n                <TableCell>{item.responsavel}</TableCell>\n                <TableCell>{item.modelo}</TableCell>\n                <TableCell>\n                  <StatusBadge status={item.status} />\n                </TableCell>\n                <TableCell>{item.uf}</TableCell>\n                <TableCell>{item.segmento}</TableCell>\n                <TableCell>\n                  <div className=\"flex justify-end gap-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => onView(item.id)}\n                      data-testid={`button-view-${item.id}`}\n                    >\n                      <Eye className=\"w-4 h-4\" />\n                    </Button>\n                    {canEdit && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => onEdit(item.id)}\n                        data-testid={`button-edit-${item.id}`}\n                      >\n                        <Pencil className=\"w-4 h-4\" />\n                      </Button>\n                    )}\n                    {canDelete && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => onDelete(item.id)}\n                        data-testid={`button-delete-${item.id}`}\n                      >\n                        <Trash2 className=\"w-4 h-4 text-destructive\" />\n                      </Button>\n                    )}\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))\n          )}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}\n","size_bytes":3418},"client/src/components/EquipmentTypeSelector.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Laptop, Smartphone, Clock } from \"lucide-react\";\n\ninterface EquipmentTypeSelectorProps {\n  onSelect: (type: \"notebook\" | \"celular\" | \"terminal\") => void;\n  selectedType?: string;\n}\n\nconst equipmentTypes = [\n  { id: \"notebook\", label: \"Notebook\", icon: Laptop },\n  { id: \"celular\", label: \"Celular\", icon: Smartphone },\n  { id: \"terminal\", label: \"Terminal\", icon: Clock },\n] as const;\n\nexport default function EquipmentTypeSelector({ onSelect, selectedType }: EquipmentTypeSelectorProps) {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n      {equipmentTypes.map(({ id, label, icon: Icon }) => (\n        <Card\n          key={id}\n          className={`p-6 cursor-pointer transition-all hover-elevate active-elevate-2 ${\n            selectedType === id ? \"ring-2 ring-primary\" : \"\"\n          }`}\n          onClick={() => onSelect(id)}\n          data-testid={`card-equipment-type-${id}`}\n        >\n          <div className=\"flex flex-col items-center gap-3\">\n            <div className={`p-3 rounded-lg ${selectedType === id ? \"bg-primary text-primary-foreground\" : \"bg-muted\"}`}>\n              <Icon className=\"w-8 h-8\" />\n            </div>\n            <h3 className=\"text-lg font-semibold\">{label}</h3>\n          </div>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":1342},"client/src/components/HistoryTimeline.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { format } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\n\ninterface HistoryEntry {\n  id: string;\n  action: string;\n  user: string;\n  timestamp: Date;\n  details: string;\n  equipment?: string;\n}\n\ninterface HistoryTimelineProps {\n  entries: HistoryEntry[];\n}\n\nconst actionColors: Record<string, string> = {\n  criacao: \"bg-[hsl(142,76%,36%)]\",\n  edicao: \"bg-[hsl(38,92%,50%)]\",\n  exclusao: \"bg-destructive\",\n};\n\nexport default function HistoryTimeline({ entries }: HistoryTimelineProps) {\n  return (\n    <div className=\"space-y-4\">\n      {entries.map((entry, index) => (\n        <div key={entry.id} className=\"flex gap-4\" data-testid={`history-entry-${entry.id}`}>\n          <div className=\"flex flex-col items-center\">\n            <div className={`w-3 h-3 rounded-full ${actionColors[entry.action] || \"bg-primary\"}`} />\n            {index !== entries.length - 1 && <div className=\"w-0.5 flex-1 bg-border mt-2\" />}\n          </div>\n          \n          <Card className=\"flex-1 p-4 mb-2\">\n            <div className=\"flex items-start justify-between gap-4 flex-wrap\">\n              <div className=\"flex-1 min-w-[200px]\">\n                <div className=\"flex items-center gap-2 mb-1\">\n                  <span className=\"font-semibold\">{entry.user}</span>\n                  <span className=\"text-xs text-muted-foreground\">\n                    {format(entry.timestamp, \"dd/MM/yyyy 'às' HH:mm\", { locale: ptBR })}\n                  </span>\n                </div>\n                <p className=\"text-sm\">{entry.details}</p>\n                {entry.equipment && (\n                  <p className=\"text-xs text-muted-foreground mt-1 font-mono\">{entry.equipment}</p>\n                )}\n              </div>\n            </div>\n          </Card>\n        </div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":1835},"client/src/components/LoginForm.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Lock, User } from \"lucide-react\";\n\ninterface LoginFormProps {\n  onLogin: (username: string, password: string) => void;\n}\n\nexport default function LoginForm({ onLogin }: LoginFormProps) {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onLogin(username, password);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-background to-muted p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1 text-center\">\n          <CardTitle className=\"text-2xl font-bold\">Sistema de Inventário</CardTitle>\n          <CardDescription>Entre com suas credenciais para acessar o sistema</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Usuário</Label>\n              <div className=\"relative\">\n                <User className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  placeholder=\"Digite seu usuário\"\n                  className=\"pl-9\"\n                  value={username}\n                  onChange={(e) => setUsername(e.target.value)}\n                  data-testid=\"input-username\"\n                  required\n                />\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Senha</Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  placeholder=\"Digite sua senha\"\n                  className=\"pl-9\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  data-testid=\"input-password\"\n                  required\n                />\n              </div>\n            </div>\n\n            <Button type=\"submit\" className=\"w-full\" data-testid=\"button-login\">\n              Entrar\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":2700},"client/src/components/NotebookForm.tsx":{"content":"import { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\ninterface NotebookFormData {\n  responsavel: string;\n  uf: string;\n  centroCusto: string;\n  segmento: string;\n  cnpj: string;\n  modelo: string;\n  fornecedor: string;\n  status: string;\n  processador: string;\n  office: string;\n  senhaAdmin: string;\n  patrimonio: string;\n  dataRecebimento: string;\n  valor: string;\n  dataChecagem: string;\n  termoLink: string;\n  fotoLink: string;\n  checklistTermo: boolean;\n  checklistAntivirus: boolean;\n  checklistFerramentaA: boolean;\n  checklistFerramentaB: boolean;\n}\n\ninterface NotebookFormProps {\n  data: Partial<NotebookFormData>;\n  onChange: (data: Partial<NotebookFormData>) => void;\n}\n\nexport default function NotebookForm({ data, onChange }: NotebookFormProps) {\n  const updateField = (field: keyof NotebookFormData, value: any) => {\n    onChange({ ...data, [field]: value });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Informações Básicas</CardTitle>\n        </CardHeader>\n        <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"responsavel\">Responsável *</Label>\n            <Input\n              id=\"responsavel\"\n              value={data.responsavel || \"\"}\n              onChange={(e) => updateField(\"responsavel\", e.target.value)}\n              data-testid=\"input-responsavel\"\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"uf\">UF *</Label>\n            <Select value={data.uf} onValueChange={(val) => updateField(\"uf\", val)}>\n              <SelectTrigger id=\"uf\" data-testid=\"select-uf\">\n                <SelectValue placeholder=\"Selecione\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"AC\">AC</SelectItem>\n                <SelectItem value=\"AL\">AL</SelectItem>\n                <SelectItem value=\"AP\">AP</SelectItem>\n                <SelectItem value=\"AM\">AM</SelectItem>\n                <SelectItem value=\"BA\">BA</SelectItem>\n                <SelectItem value=\"CE\">CE</SelectItem>\n                <SelectItem value=\"DF\">DF</SelectItem>\n                <SelectItem value=\"ES\">ES</SelectItem>\n                <SelectItem value=\"GO\">GO</SelectItem>\n                <SelectItem value=\"MA\">MA</SelectItem>\n                <SelectItem value=\"MT\">MT</SelectItem>\n                <SelectItem value=\"MS\">MS</SelectItem>\n                <SelectItem value=\"MG\">MG</SelectItem>\n                <SelectItem value=\"PA\">PA</SelectItem>\n                <SelectItem value=\"PB\">PB</SelectItem>\n                <SelectItem value=\"PR\">PR</SelectItem>\n                <SelectItem value=\"PE\">PE</SelectItem>\n                <SelectItem value=\"PI\">PI</SelectItem>\n                <SelectItem value=\"RJ\">RJ</SelectItem>\n                <SelectItem value=\"RN\">RN</SelectItem>\n                <SelectItem value=\"RS\">RS</SelectItem>\n                <SelectItem value=\"RO\">RO</SelectItem>\n                <SelectItem value=\"RR\">RR</SelectItem>\n                <SelectItem value=\"SC\">SC</SelectItem>\n                <SelectItem value=\"SP\">SP</SelectItem>\n                <SelectItem value=\"SE\">SE</SelectItem>\n                <SelectItem value=\"TO\">TO</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"centroCusto\">Centro de Custo</Label>\n            <Input\n              id=\"centroCusto\"\n              value={data.centroCusto || \"\"}\n              onChange={(e) => updateField(\"centroCusto\", e.target.value)}\n              data-testid=\"input-centro-custo\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"segmento\">Segmento *</Label>\n            <Input\n              id=\"segmento\"\n              value={data.segmento || \"\"}\n              onChange={(e) => updateField(\"segmento\", e.target.value)}\n              data-testid=\"input-segmento\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"cnpj\">CNPJ</Label>\n            <Select value={data.cnpj} onValueChange={(val) => updateField(\"cnpj\", val)}>\n              <SelectTrigger id=\"cnpj\" data-testid=\"select-cnpj\">\n                <SelectValue placeholder=\"Selecione\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"ATENAS SERVIÇO DE APOIO LTDA - CNPJ: 24.329.959/0001-33\">ATENAS SERVIÇO DE APOIO LTDA - CNPJ: 24.329.959/0001-33</SelectItem>\n                <SelectItem value=\"TELOS CONSULTORIA EMPRESARIAL LTDA - CNPJ: 15.541.957/0001-12\">TELOS CONSULTORIA EMPRESARIAL LTDA - CNPJ: 15.541.957/0001-12</SelectItem>\n                <SelectItem value=\"OPUS CONSULTORIA LTDA - CNPJ: 14.706.283/0001-04\">OPUS CONSULTORIA LTDA - CNPJ: 14.706.283/0001-04</SelectItem>\n                <SelectItem value=\"OPUS CONSULTORIA LTDA - CNPJ: 14.706.283/0002-87\">OPUS CONSULTORIA LTDA - CNPJ: 14.706.283/0002-87</SelectItem>\n                <SelectItem value=\"OPUS SERVIÇOS ESPECIALIZADOS LTDA - CNPJ: 42.537.087/0001-80\">OPUS SERVIÇOS ESPECIALIZADOS LTDA - CNPJ: 42.537.087/0001-80</SelectItem>\n                <SelectItem value=\"OPUS MANUTENCAO LTDA - CNPJ: 49.996.326/0001-00\">OPUS MANUTENCAO LTDA - CNPJ: 49.996.326/0001-00</SelectItem>\n                <SelectItem value=\"OPUS LOGISTICA LTDA - CNPJ: 50.016.866/0001-69\">OPUS LOGISTICA LTDA - CNPJ: 50.016.866/0001-69</SelectItem>\n                <SelectItem value=\"OPUS SERVICOS ESPECIALIZADOS LTDA - CNPJ: 42.537.087/0002-61\">OPUS SERVICOS ESPECIALIZADOS LTDA - CNPJ: 42.537.087/0002-61</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Dados Técnicos</CardTitle>\n        </CardHeader>\n        <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"modelo\">Modelo *</Label>\n            <Input\n              id=\"modelo\"\n              value={data.modelo || \"\"}\n              onChange={(e) => updateField(\"modelo\", e.target.value)}\n              data-testid=\"input-modelo\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"fornecedor\">Fornecedor *</Label>\n            <Select value={data.fornecedor} onValueChange={(val) => updateField(\"fornecedor\", val)}>\n              <SelectTrigger id=\"fornecedor\" data-testid=\"select-fornecedor\">\n                <SelectValue placeholder=\"Selecione\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"MAGNA\">MAGNA</SelectItem>\n                <SelectItem value=\"OPUS\">OPUS</SelectItem>\n                <SelectItem value=\"ONLY\">ONLY</SelectItem>\n                <SelectItem value=\"ALLU\">ALLU</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"status\">Status *</Label>\n            <Select value={data.status} onValueChange={(val) => updateField(\"status\", val)}>\n              <SelectTrigger id=\"status\" data-testid=\"select-status\">\n                <SelectValue placeholder=\"Selecione\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"EM USO\">EM USO</SelectItem>\n                <SelectItem value=\"DEVOLVER\">DEVOLVER</SelectItem>\n                <SelectItem value=\"CORREIO\">CORREIO</SelectItem>\n                <SelectItem value=\"GUARDADO\">GUARDADO</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"processador\">Processador</Label>\n            <Input\n              id=\"processador\"\n              value={data.processador || \"\"}\n              onChange={(e) => updateField(\"processador\", e.target.value)}\n              data-testid=\"input-processador\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"office\">Office</Label>\n            <Select value={data.office} onValueChange={(val) => updateField(\"office\", val)}>\n              <SelectTrigger id=\"office\" data-testid=\"select-office\">\n                <SelectValue placeholder=\"Selecione\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"NÃO LICENCIADO\">NÃO LICENCIADO</SelectItem>\n                <SelectItem value=\"OFFICE BASIC\">OFFICE BASIC</SelectItem>\n                <SelectItem value=\"OFFICE STANDARD\">OFFICE STANDARD</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"senhaAdmin\">Senha Admin</Label>\n            <Input\n              id=\"senhaAdmin\"\n              type=\"password\"\n              value={data.senhaAdmin || \"\"}\n              onChange={(e) => updateField(\"senhaAdmin\", e.target.value)}\n              data-testid=\"input-senha-admin\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"patrimonio\">Patrimônio</Label>\n            <Input\n              id=\"patrimonio\"\n              className=\"font-mono\"\n              value={data.patrimonio || \"\"}\n              onChange={(e) => updateField(\"patrimonio\", e.target.value)}\n              data-testid=\"input-patrimonio\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"dataRecebimento\">Data de Recebimento</Label>\n            <Input\n              id=\"dataRecebimento\"\n              type=\"date\"\n              value={data.dataRecebimento || \"\"}\n              onChange={(e) => updateField(\"dataRecebimento\", e.target.value)}\n              data-testid=\"input-data-recebimento\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"valor\">Valor do Equipamento</Label>\n            <Input\n              id=\"valor\"\n              type=\"number\"\n              step=\"0.01\"\n              value={data.valor || \"\"}\n              onChange={(e) => updateField(\"valor\", e.target.value)}\n              data-testid=\"input-valor\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"dataChecagem\">Data de Checagem</Label>\n            <Input\n              id=\"dataChecagem\"\n              type=\"date\"\n              value={data.dataChecagem || \"\"}\n              onChange={(e) => updateField(\"dataChecagem\", e.target.value)}\n              data-testid=\"input-data-checagem\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Documentação</CardTitle>\n        </CardHeader>\n        <CardContent className=\"grid grid-cols-1 gap-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"termoLink\">Link do Termo</Label>\n            <Input\n              id=\"termoLink\"\n              type=\"url\"\n              placeholder=\"https://...\"\n              value={data.termoLink || \"\"}\n              onChange={(e) => updateField(\"termoLink\", e.target.value)}\n              data-testid=\"input-termo-link\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"fotoLink\">Link da Foto do Equipamento</Label>\n            <Input\n              id=\"fotoLink\"\n              type=\"url\"\n              placeholder=\"https://...\"\n              value={data.fotoLink || \"\"}\n              onChange={(e) => updateField(\"fotoLink\", e.target.value)}\n              data-testid=\"input-foto-link\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Checklist</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"checklistTermo\"\n              checked={data.checklistTermo}\n              onCheckedChange={(checked) => updateField(\"checklistTermo\", checked)}\n              data-testid=\"checkbox-termo\"\n            />\n            <Label htmlFor=\"checklistTermo\" className=\"font-normal cursor-pointer\">\n              Termo\n            </Label>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"checklistAntivirus\"\n              checked={data.checklistAntivirus}\n              onCheckedChange={(checked) => updateField(\"checklistAntivirus\", checked)}\n              data-testid=\"checkbox-antivirus\"\n            />\n            <Label htmlFor=\"checklistAntivirus\" className=\"font-normal cursor-pointer\">\n              Antivírus\n            </Label>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"checklistFerramentaA\"\n              checked={data.checklistFerramentaA}\n              onCheckedChange={(checked) => updateField(\"checklistFerramentaA\", checked)}\n              data-testid=\"checkbox-ferramenta-a\"\n            />\n            <Label htmlFor=\"checklistFerramentaA\" className=\"font-normal cursor-pointer\">\n              Ferramenta A\n            </Label>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"checklistFerramentaB\"\n              checked={data.checklistFerramentaB}\n              onCheckedChange={(checked) => updateField(\"checklistFerramentaB\", checked)}\n              data-testid=\"checkbox-ferramenta-b\"\n            />\n            <Label htmlFor=\"checklistFerramentaB\" className=\"font-normal cursor-pointer\">\n              Ferramenta B\n            </Label>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":14031},"client/src/components/StatusBadge.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\n\ninterface StatusBadgeProps {\n  status: string;\n}\n\nconst statusConfig: Record<string, { color: string; bg: string }> = {\n  \"EM USO\": { color: \"text-[hsl(142,76%,36%)]\", bg: \"bg-[hsl(142,76%,36%)]/15\" },\n  \"DEVOLVER\": { color: \"text-[hsl(38,92%,50%)]\", bg: \"bg-[hsl(38,92%,50%)]/15\" },\n  \"CORREIO\": { color: \"text-[hsl(210,85%,55%)]\", bg: \"bg-[hsl(210,85%,55%)]/15\" },\n  \"GUARDADO\": { color: \"text-muted-foreground\", bg: \"bg-muted\" },\n  \"TROCA\": { color: \"text-[hsl(280,65%,55%)]\", bg: \"bg-[hsl(280,65%,55%)]/15\" },\n};\n\nexport default function StatusBadge({ status }: StatusBadgeProps) {\n  const config = statusConfig[status] || statusConfig[\"GUARDADO\"];\n  \n  return (\n    <Badge\n      variant=\"secondary\"\n      className={`${config.bg} ${config.color} border-0 font-medium`}\n      data-testid={`badge-status-${status.toLowerCase().replace(/\\s/g, '-')}`}\n    >\n      {status}\n    </Badge>\n  );\n}\n","size_bytes":942},"client/src/components/TerminalForm.tsx":{"content":"import { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\ninterface TerminalFormData {\n  numeroRelogio: string;\n  status: string;\n  uf: string;\n  segmento: string;\n  centroCusto: string;\n  statusNext: string;\n  observacao: string;\n  dataChecagem: string;\n  termoLink: string;\n  fotoLink: string;\n}\n\ninterface TerminalFormProps {\n  data: Partial<TerminalFormData>;\n  onChange: (data: Partial<TerminalFormData>) => void;\n}\n\nexport default function TerminalForm({ data, onChange }: TerminalFormProps) {\n  const updateField = (field: keyof TerminalFormData, value: any) => {\n    onChange({ ...data, [field]: value });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Informações do Terminal</CardTitle>\n        </CardHeader>\n        <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"numeroRelogio\">Número do Relógio *</Label>\n            <Input\n              id=\"numeroRelogio\"\n              className=\"font-mono\"\n              value={data.numeroRelogio || \"\"}\n              onChange={(e) => updateField(\"numeroRelogio\", e.target.value)}\n              data-testid=\"input-numero-relogio\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"status\">Status *</Label>\n            <Select value={data.status} onValueChange={(val) => updateField(\"status\", val)}>\n              <SelectTrigger id=\"status\" data-testid=\"select-status\">\n                <SelectValue placeholder=\"Selecione\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"EM USO\">EM USO</SelectItem>\n                <SelectItem value=\"DEVOLVER\">DEVOLVER</SelectItem>\n                <SelectItem value=\"CORREIO\">CORREIO</SelectItem>\n                <SelectItem value=\"GUARDADO\">GUARDADO</SelectItem>\n                <SelectItem value=\"TROCA\">TROCA</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"uf\">UF *</Label>\n            <Select value={data.uf} onValueChange={(val) => updateField(\"uf\", val)}>\n              <SelectTrigger id=\"uf\" data-testid=\"select-uf\">\n                <SelectValue placeholder=\"Selecione\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"SP\">SP</SelectItem>\n                <SelectItem value=\"RJ\">RJ</SelectItem>\n                <SelectItem value=\"MG\">MG</SelectItem>\n                <SelectItem value=\"RS\">RS</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"segmento\">Segmento *</Label>\n            <Input\n              id=\"segmento\"\n              value={data.segmento || \"\"}\n              onChange={(e) => updateField(\"segmento\", e.target.value)}\n              data-testid=\"input-segmento\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"centroCusto\">Centro de Custo</Label>\n            <Input\n              id=\"centroCusto\"\n              value={data.centroCusto || \"\"}\n              onChange={(e) => updateField(\"centroCusto\", e.target.value)}\n              data-testid=\"input-centro-custo\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"statusNext\">Status Next</Label>\n            <Input\n              id=\"statusNext\"\n              value={data.statusNext || \"\"}\n              onChange={(e) => updateField(\"statusNext\", e.target.value)}\n              data-testid=\"input-status-next\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"dataChecagem\">Data de Checagem</Label>\n            <Input\n              id=\"dataChecagem\"\n              type=\"date\"\n              value={data.dataChecagem || \"\"}\n              onChange={(e) => updateField(\"dataChecagem\", e.target.value)}\n              data-testid=\"input-data-checagem\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Observações</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"observacao\">Observação</Label>\n            <Textarea\n              id=\"observacao\"\n              rows={4}\n              value={data.observacao || \"\"}\n              onChange={(e) => updateField(\"observacao\", e.target.value)}\n              data-testid=\"textarea-observacao\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Documentação</CardTitle>\n        </CardHeader>\n        <CardContent className=\"grid grid-cols-1 gap-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"termoLink\">Link do Termo</Label>\n            <Input\n              id=\"termoLink\"\n              type=\"url\"\n              placeholder=\"https://...\"\n              value={data.termoLink || \"\"}\n              onChange={(e) => updateField(\"termoLink\", e.target.value)}\n              data-testid=\"input-termo-link\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"fotoLink\">Link da Foto do Equipamento</Label>\n            <Input\n              id=\"fotoLink\"\n              type=\"url\"\n              placeholder=\"https://...\"\n              value={data.fotoLink || \"\"}\n              onChange={(e) => updateField(\"fotoLink\", e.target.value)}\n              data-testid=\"input-foto-link\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5955},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"@/contexts/ThemeContext\";\n\nexport function ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" />\n      )}\n      <span className=\"sr-only\">Alternar tema</span>\n    </Button>\n  );\n}\n","size_bytes":556},"client/src/components/UserManagementTable.tsx":{"content":"import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Pencil, Trash2 } from \"lucide-react\";\n\ninterface User {\n  id: string;\n  nome: string;\n  email: string;\n  perfil: \"Admin\" | \"Suporte\" | \"Controle\";\n  ativo: boolean;\n}\n\ninterface UserManagementTableProps {\n  users: User[];\n  onEdit: (id: string) => void;\n  onDelete: (id: string) => void;\n  onToggleActive?: (id: string, currentStatus: boolean) => void;\n}\n\nconst perfilColors: Record<string, string> = {\n  Admin: \"bg-primary/15 text-primary\",\n  Suporte: \"bg-[hsl(38,92%,50%)]/15 text-[hsl(38,92%,50%)]\",\n  Controle: \"bg-[hsl(142,76%,36%)]/15 text-[hsl(142,76%,36%)]\",\n};\n\nexport default function UserManagementTable({ users, onEdit, onDelete, onToggleActive }: UserManagementTableProps) {\n  return (\n    <div className=\"rounded-lg border\">\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead>Nome</TableHead>\n            <TableHead>Email</TableHead>\n            <TableHead>Perfil</TableHead>\n            <TableHead>Status</TableHead>\n            <TableHead className=\"text-right\">Ações</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {users.map((user) => (\n            <TableRow key={user.id} className=\"hover-elevate\" data-testid={`row-user-${user.id}`}>\n              <TableCell className=\"font-medium\">{user.nome}</TableCell>\n              <TableCell>{user.email}</TableCell>\n              <TableCell>\n                <Badge variant=\"secondary\" className={`${perfilColors[user.perfil]} border-0`}>\n                  {user.perfil}\n                </Badge>\n              </TableCell>\n              <TableCell>\n                <Badge variant={user.ativo ? \"secondary\" : \"outline\"} className={user.ativo ? \"bg-[hsl(142,76%,36%)]/15 text-[hsl(142,76%,36%)] border-0\" : \"\"}>\n                  {user.ativo ? \"Ativo\" : \"Inativo\"}\n                </Badge>\n              </TableCell>\n              <TableCell>\n                <div className=\"flex justify-end gap-2\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => onEdit(user.id)}\n                    data-testid={`button-edit-user-${user.id}`}\n                  >\n                    <Pencil className=\"w-4 h-4\" />\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => onDelete(user.id)}\n                    data-testid={`button-delete-user-${user.id}`}\n                  >\n                    <Trash2 className=\"w-4 h-4 text-destructive\" />\n                  </Button>\n                </div>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}\n","size_bytes":2913},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { User } from \"@shared/schema\";\n\ninterface AuthContextType {\n  user: Omit<User, \"senha\"> | null;\n  isLoading: boolean;\n  login: (email: string, senha: string) => Promise<void>;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<Omit<User, \"senha\"> | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Carregar usuário do localStorage\n    const storedUser = localStorage.getItem(\"user\");\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n    setIsLoading(false);\n  }, []);\n\n  const login = async (email: string, senha: string) => {\n    const response = await apiRequest(\"POST\", \"/api/auth/login\", { email, senha });\n    const data = await response.json();\n    \n    setUser(data.user);\n    localStorage.setItem(\"user\", JSON.stringify(data.user));\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem(\"user\");\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, isLoading, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":1524},"client/src/contexts/ThemeContext.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeContextType = {\n  theme: Theme;\n  toggleTheme: () => void;\n};\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const saved = localStorage.getItem(\"theme\");\n    return (saved as Theme) || \"light\";\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    if (theme === \"dark\") {\n      root.classList.add(\"dark\");\n    } else {\n      root.classList.remove(\"dark\");\n    }\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme((prev) => (prev === \"light\" ? \"dark\" : \"light\"));\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1140},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/CadastroEquipamento.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport EquipmentTypeSelector from \"@/components/EquipmentTypeSelector\";\nimport NotebookForm from \"@/components/NotebookForm\";\nimport CelularForm from \"@/components/CelularForm\";\nimport TerminalForm from \"@/components/TerminalForm\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { ArrowLeft } from \"lucide-react\";\n\nexport default function CadastroEquipamento() {\n  const [selectedType, setSelectedType] = useState<\"notebook\" | \"celular\" | \"terminal\" | null>(null);\n  const [formData, setFormData] = useState({});\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  const createMutation = useMutation({\n    mutationFn: async ({ type, data }: { type: string; data: any }) => {\n      const endpoint = type === \"notebook\" ? \"/api/notebooks\"\n                     : type === \"celular\" ? \"/api/celulares\"\n                     : \"/api/terminais\";\n      \n      const dataWithUser = {\n        ...data,\n        _userId: user?.id,\n        _userName: user?.nome,\n      };\n      \n      await apiRequest(\"POST\", endpoint, dataWithUser);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notebooks\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/celulares\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/terminais\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/historico\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      \n      toast({\n        title: \"Equipamento cadastrado!\",\n        description: `${selectedType === \"notebook\" ? \"Notebook\" : selectedType === \"celular\" ? \"Celular\" : \"Terminal\"} foi adicionado ao inventário com sucesso.`,\n      });\n      \n      setSelectedType(null);\n      setFormData({});\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Erro ao cadastrar\",\n        description: error.message || \"Não foi possível cadastrar o equipamento\",\n      });\n    },\n  });\n\n  const handleSave = () => {\n    if (!selectedType) return;\n\n    // Validação básica dos campos obrigatórios\n    const requiredFields = selectedType === \"notebook\"\n      ? [\"responsavel\", \"uf\", \"segmento\", \"modelo\", \"fornecedor\", \"status\"]\n      : selectedType === \"celular\"\n      ? [\"responsavel\", \"numeroCelular\", \"uf\", \"segmento\", \"modelo\", \"status\"]\n      : [\"numeroRelogio\", \"status\", \"uf\", \"segmento\"];\n\n    const missingFields = requiredFields.filter(field => !(formData as any)[field]);\n    \n    if (missingFields.length > 0) {\n      toast({\n        variant: \"destructive\",\n        title: \"Campos obrigatórios faltando\",\n        description: `Por favor, preencha todos os campos obrigatórios.`,\n      });\n      return;\n    }\n\n    createMutation.mutate({ type: selectedType, data: formData });\n  };\n\n  const handleCancel = () => {\n    setSelectedType(null);\n    setFormData({});\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\" data-testid=\"heading-cadastro\">Cadastrar Equipamento</h1>\n        <p className=\"text-muted-foreground\">Adicionar novo equipamento ao inventário</p>\n      </div>\n\n      {!selectedType ? (\n        <EquipmentTypeSelector\n          onSelect={setSelectedType}\n          selectedType={selectedType || undefined}\n        />\n      ) : (\n        <div className=\"space-y-6\">\n          <Button\n            variant=\"ghost\"\n            onClick={handleCancel}\n            data-testid=\"button-back\"\n            disabled={createMutation.isPending}\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Voltar\n          </Button>\n\n          <div>\n            <h2 className=\"text-2xl font-semibold mb-4\">\n              {selectedType === \"notebook\" && \"Cadastrar Notebook\"}\n              {selectedType === \"celular\" && \"Cadastrar Celular\"}\n              {selectedType === \"terminal\" && \"Cadastrar Terminal\"}\n            </h2>\n\n            {selectedType === \"notebook\" && (\n              <NotebookForm data={formData} onChange={setFormData} />\n            )}\n            {selectedType === \"celular\" && (\n              <CelularForm data={formData} onChange={setFormData} />\n            )}\n            {selectedType === \"terminal\" && (\n              <TerminalForm data={formData} onChange={setFormData} />\n            )}\n          </div>\n\n          <div className=\"flex justify-end gap-4\">\n            <Button \n              variant=\"outline\" \n              onClick={handleCancel} \n              data-testid=\"button-cancel\"\n              disabled={createMutation.isPending}\n            >\n              Cancelar\n            </Button>\n            <Button \n              onClick={handleSave} \n              data-testid=\"button-save\"\n              disabled={createMutation.isPending}\n            >\n              {createMutation.isPending ? \"Salvando...\" : \"Salvar Equipamento\"}\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":5155},"client/src/pages/Dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport DashboardStats from \"@/components/DashboardStats\";\nimport DashboardCharts from \"@/components/DashboardCharts\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\ninterface DashboardStatsData {\n  totalEquipment: number;\n  byStatus: Record<string, number>;\n  byUF: Record<string, number>;\n  bySegmento: Record<string, number>;\n  byFornecedor: Record<string, number>;\n}\n\nexport default function Dashboard() {\n  const { data, isLoading } = useQuery<DashboardStatsData>({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Dashboard</h1>\n          <p className=\"text-muted-foreground\">Visão geral do inventário de equipamentos</p>\n        </div>\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n          <Skeleton className=\"h-32\" />\n          <Skeleton className=\"h-32\" />\n          <Skeleton className=\"h-32\" />\n          <Skeleton className=\"h-32\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (!data) {\n    return (\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Dashboard</h1>\n          <p className=\"text-muted-foreground\">Nenhum dado disponível</p>\n        </div>\n      </div>\n    );\n  }\n\n  const statusData = Object.entries(data.byStatus).map(([name, value]) => ({\n    name: name === \"EM USO\" ? \"Em Uso\" : \n          name === \"DEVOLVER\" ? \"Devolver\" :\n          name === \"CORREIO\" ? \"Correio\" :\n          name === \"GUARDADO\" ? \"Guardado\" :\n          name === \"TROCA\" ? \"Troca\" : name,\n    value,\n  }));\n\n  const ufData = Object.entries(data.byUF).map(([name, value]) => ({\n    name,\n    value,\n  }));\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\" data-testid=\"heading-dashboard\">Dashboard</h1>\n        <p className=\"text-muted-foreground\">Visão geral do inventário de equipamentos</p>\n      </div>\n\n      <DashboardStats {...data} />\n      <DashboardCharts statusData={statusData} ufData={ufData} />\n    </div>\n  );\n}\n","size_bytes":2127},"client/src/pages/GestaoUsuarios.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport UserManagementTable from \"@/components/UserManagementTable\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Plus } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\ninterface UserWithoutPassword {\n  id: string;\n  nome: string;\n  email: string;\n  perfil: \"Admin\" | \"Suporte\" | \"Controle\";\n  ativo: boolean;\n}\n\nexport default function GestaoUsuarios() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [userToDelete, setUserToDelete] = useState<string | null>(null);\n  const [newUserName, setNewUserName] = useState(\"\");\n  const [newUserEmail, setNewUserEmail] = useState(\"\");\n  const [newUserPassword, setNewUserPassword] = useState(\"\");\n  const [newUserPerfil, setNewUserPerfil] = useState<\"Admin\" | \"Suporte\" | \"Controle\">(\"Suporte\");\n  const { toast } = useToast();\n\n  const { data: users = [], isLoading } = useQuery<UserWithoutPassword[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: { nome: string; email: string; senha: string; perfil: string }) => {\n      await apiRequest(\"POST\", \"/api/users\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Usuário adicionado!\",\n        description: `${newUserName} foi cadastrado com sucesso.`,\n      });\n      setIsDialogOpen(false);\n      setNewUserName(\"\");\n      setNewUserEmail(\"\");\n      setNewUserPassword(\"\");\n      setNewUserPerfil(\"Suporte\");\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Erro ao criar usuário\",\n        description: error.message || \"Não foi possível criar o usuário\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/users/${id}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Usuário excluído\",\n        description: \"O usuário foi removido do sistema com sucesso\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Erro ao excluir\",\n        description: error.message || \"Não foi possível excluir o usuário\",\n      });\n    },\n  });\n\n  const toggleActiveMutation = useMutation({\n    mutationFn: async ({ id, ativo }: { id: string; ativo: boolean }) => {\n      await apiRequest(\"PATCH\", `/api/users/${id}`, { ativo });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Status atualizado\",\n        description: \"O status do usuário foi atualizado com sucesso\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Erro ao atualizar\",\n        description: error.message || \"Não foi possível atualizar o status\",\n      });\n    },\n  });\n\n  const handleAddUser = () => {\n    if (!newUserName || !newUserEmail || !newUserPassword) {\n      toast({\n        variant: \"destructive\",\n        title: \"Campos obrigatórios\",\n        description: \"Por favor, preencha todos os campos\",\n      });\n      return;\n    }\n\n    createMutation.mutate({\n      nome: newUserName,\n      email: newUserEmail,\n      senha: newUserPassword,\n      perfil: newUserPerfil,\n    });\n  };\n\n  const handleEdit = (id: string) => {\n    toast({\n      title: \"Editar Usuário\",\n      description: \"Funcionalidade em desenvolvimento\",\n    });\n  };\n\n  const handleDelete = (id: string) => {\n    setUserToDelete(id);\n    setDeleteDialogOpen(true);\n  };\n\n  const confirmDelete = () => {\n    if (userToDelete) {\n      deleteMutation.mutate(userToDelete);\n      setDeleteDialogOpen(false);\n      setUserToDelete(null);\n    }\n  };\n\n  const handleToggleActive = (id: string, currentStatus: boolean) => {\n    toggleActiveMutation.mutate({ id, ativo: !currentStatus });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Gestão de Usuários</h1>\n          <p className=\"text-muted-foreground\">Gerenciar usuários e permissões do sistema</p>\n        </div>\n        <Skeleton className=\"h-96\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between flex-wrap gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"heading-usuarios\">Gestão de Usuários</h1>\n          <p className=\"text-muted-foreground\">Gerenciar usuários e permissões do sistema</p>\n        </div>\n        <Button onClick={() => setIsDialogOpen(true)} data-testid=\"button-add-user\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Adicionar Usuário\n        </Button>\n      </div>\n\n      <UserManagementTable\n        users={users}\n        onEdit={handleEdit}\n        onDelete={handleDelete}\n        onToggleActive={handleToggleActive}\n      />\n\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Adicionar Novo Usuário</DialogTitle>\n            <DialogDescription>\n              Preencha os dados do novo usuário e selecione o perfil de acesso.\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"userName\">Nome *</Label>\n              <Input\n                id=\"userName\"\n                value={newUserName}\n                onChange={(e) => setNewUserName(e.target.value)}\n                data-testid=\"input-new-user-name\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"userEmail\">Email *</Label>\n              <Input\n                id=\"userEmail\"\n                type=\"email\"\n                value={newUserEmail}\n                onChange={(e) => setNewUserEmail(e.target.value)}\n                data-testid=\"input-new-user-email\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"userPassword\">Senha *</Label>\n              <Input\n                id=\"userPassword\"\n                type=\"password\"\n                value={newUserPassword}\n                onChange={(e) => setNewUserPassword(e.target.value)}\n                data-testid=\"input-new-user-password\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Perfil de Acesso</Label>\n              <RadioGroup value={newUserPerfil} onValueChange={(val) => setNewUserPerfil(val as any)}>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"Admin\" id=\"admin\" data-testid=\"radio-admin\" />\n                  <Label htmlFor=\"admin\" className=\"font-normal cursor-pointer\">\n                    Admin - Acesso total ao sistema\n                  </Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"Suporte\" id=\"suporte\" data-testid=\"radio-suporte\" />\n                  <Label htmlFor=\"suporte\" className=\"font-normal cursor-pointer\">\n                    Suporte - Controle do inventário e modificações\n                  </Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"Controle\" id=\"controle\" data-testid=\"radio-controle\" />\n                  <Label htmlFor=\"controle\" className=\"font-normal cursor-pointer\">\n                    Controle - Apenas visualização de métricas\n                  </Label>\n                </div>\n              </RadioGroup>\n            </div>\n          </div>\n\n          <DialogFooter>\n            <Button \n              variant=\"outline\" \n              onClick={() => setIsDialogOpen(false)}\n              disabled={createMutation.isPending}\n            >\n              Cancelar\n            </Button>\n            <Button \n              onClick={handleAddUser}\n              disabled={createMutation.isPending}\n              data-testid=\"button-save-user\"\n            >\n              {createMutation.isPending ? \"Salvando...\" : \"Adicionar Usuário\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Confirmar Exclusão</AlertDialogTitle>\n            <AlertDialogDescription>\n              Tem certeza que deseja excluir este usuário? Esta ação não pode ser desfeita.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancelar</AlertDialogCancel>\n            <AlertDialogAction \n              onClick={confirmDelete}\n              data-testid=\"button-confirm-delete\"\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n            >\n              Excluir\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":10043},"client/src/pages/Historico.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport HistoryTimeline from \"@/components/HistoryTimeline\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { Historico } from \"@shared/schema\";\n\nexport default function Historico() {\n  const [dateFrom, setDateFrom] = useState(\"\");\n  const [dateTo, setDateTo] = useState(\"\");\n  const [actionFilter, setActionFilter] = useState(\"all\");\n\n  const { data: historico = [], isLoading } = useQuery<Historico[]>({\n    queryKey: [\"/api/historico\"],\n  });\n\n  const filteredHistory = useMemo(() => {\n    return historico.filter(entry => {\n      // Filtro de ação\n      if (actionFilter !== \"all\" && entry.action !== actionFilter) return false;\n\n      // Filtro de data\n      if (dateFrom) {\n        const entryDate = new Date(entry.timestamp);\n        const fromDate = new Date(dateFrom);\n        if (entryDate < fromDate) return false;\n      }\n\n      if (dateTo) {\n        const entryDate = new Date(entry.timestamp);\n        const toDate = new Date(dateTo);\n        toDate.setHours(23, 59, 59, 999); // Incluir todo o dia\n        if (entryDate > toDate) return false;\n      }\n\n      return true;\n    });\n  }, [historico, actionFilter, dateFrom, dateTo]);\n\n  const formattedEntries = filteredHistory.map(entry => ({\n    id: entry.id,\n    action: entry.action,\n    user: entry.userName,\n    timestamp: new Date(entry.timestamp),\n    details: entry.details,\n    equipment: entry.equipment || \"N/A\",\n  }));\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Histórico</h1>\n          <p className=\"text-muted-foreground\">Registro de todas as modificações no inventário</p>\n        </div>\n        <Skeleton className=\"h-32\" />\n        <Skeleton className=\"h-96\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\" data-testid=\"heading-historico\">Histórico</h1>\n        <p className=\"text-muted-foreground\">Registro de todas as modificações no inventário</p>\n      </div>\n\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"dateFrom\">Data Inicial</Label>\n              <Input\n                id=\"dateFrom\"\n                type=\"date\"\n                value={dateFrom}\n                onChange={(e) => setDateFrom(e.target.value)}\n                data-testid=\"input-date-from\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"dateTo\">Data Final</Label>\n              <Input\n                id=\"dateTo\"\n                type=\"date\"\n                value={dateTo}\n                onChange={(e) => setDateTo(e.target.value)}\n                data-testid=\"input-date-to\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"actionFilter\">Tipo de Ação</Label>\n              <Select value={actionFilter} onValueChange={setActionFilter}>\n                <SelectTrigger id=\"actionFilter\" data-testid=\"select-action-filter\">\n                  <SelectValue placeholder=\"Selecione\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todas</SelectItem>\n                  <SelectItem value=\"criacao\">Criação</SelectItem>\n                  <SelectItem value=\"edicao\">Edição</SelectItem>\n                  <SelectItem value=\"exclusao\">Exclusão</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {formattedEntries.length > 0 ? (\n        <HistoryTimeline entries={formattedEntries} />\n      ) : (\n        <Card>\n          <CardContent className=\"pt-6 text-center text-muted-foreground\">\n            Nenhum registro encontrado\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":4296},"client/src/pages/Inventario.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport EquipmentFilters from \"@/components/EquipmentFilters\";\nimport EquipmentTable from \"@/components/EquipmentTable\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport type { Notebook, Celular, Terminal } from \"@shared/schema\";\n\ninterface InventarioProps {\n  userRole?: \"Admin\" | \"Suporte\" | \"Controle\";\n}\n\ntype EquipmentItem = {\n  id: string;\n  tipo: string;\n  responsavel: string;\n  modelo: string;\n  status: string;\n  uf: string;\n  segmento: string;\n  fornecedor?: string;\n};\n\nexport default function Inventario({ userRole = \"Admin\" }: InventarioProps) {\n  const [activeTab, setActiveTab] = useState(\"todos\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"\");\n  const [ufFilter, setUFFilter] = useState(\"\");\n  const [segmentoFilter, setSegmentoFilter] = useState(\"\");\n  const [fornecedorFilter, setFornecedorFilter] = useState(\"\");\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [equipmentToDelete, setEquipmentToDelete] = useState<{ id: string; tipo: string } | null>(null);\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  const { data: notebooks = [], isLoading: loadingNotebooks } = useQuery<Notebook[]>({\n    queryKey: [\"/api/notebooks\"],\n  });\n\n  const { data: celulares = [], isLoading: loadingCelulares } = useQuery<Celular[]>({\n    queryKey: [\"/api/celulares\"],\n  });\n\n  const { data: terminais = [], isLoading: loadingTerminais } = useQuery<Terminal[]>({\n    queryKey: [\"/api/terminais\"],\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async ({ id, tipo }: { id: string; tipo: string }) => {\n      const endpoint = tipo === \"Notebook\" ? \"/api/notebooks\" \n                     : tipo === \"Celular\" ? \"/api/celulares\"\n                     : \"/api/terminais\";\n      \n      await apiRequest(\"DELETE\", `${endpoint}/${id}`, {\n        _userId: user?.id,\n        _userName: user?.nome,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notebooks\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/celulares\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/terminais\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/historico\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      \n      toast({\n        title: \"Equipamento excluído\",\n        description: \"O equipamento foi removido do inventário com sucesso\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Erro ao excluir\",\n        description: error.message || \"Não foi possível excluir o equipamento\",\n      });\n    },\n  });\n\n  const allEquipment: EquipmentItem[] = useMemo(() => {\n    const notebooksData = notebooks.map(n => ({\n      id: n.id,\n      tipo: \"Notebook\",\n      responsavel: n.responsavel,\n      modelo: n.modelo,\n      status: n.status,\n      uf: n.uf,\n      segmento: n.segmento,\n      fornecedor: n.fornecedor,\n    }));\n\n    const celularesData = celulares.map(c => ({\n      id: c.id,\n      tipo: \"Celular\",\n      responsavel: c.responsavel,\n      modelo: c.modelo,\n      status: c.status,\n      uf: c.uf,\n      segmento: c.segmento,\n    }));\n\n    const terminaisData = terminais.map(t => ({\n      id: t.id,\n      tipo: \"Terminal\",\n      responsavel: t.uf,\n      modelo: t.numeroRelogio,\n      status: t.status,\n      uf: t.uf,\n      segmento: t.segmento,\n    }));\n\n    return [...notebooksData, ...celularesData, ...terminaisData];\n  }, [notebooks, celulares, terminais]);\n\n  const filteredEquipment = useMemo(() => {\n    return allEquipment.filter(item => {\n      // Filtro de tipo (tabs)\n      if (activeTab === \"notebook\" && item.tipo !== \"Notebook\") return false;\n      if (activeTab === \"celular\" && item.tipo !== \"Celular\") return false;\n      if (activeTab === \"terminal\" && item.tipo !== \"Terminal\") return false;\n\n      // Filtro de busca\n      if (searchQuery) {\n        const search = searchQuery.toLowerCase();\n        const matchesSearch = \n          item.responsavel.toLowerCase().includes(search) ||\n          item.modelo.toLowerCase().includes(search) ||\n          item.segmento.toLowerCase().includes(search);\n        if (!matchesSearch) return false;\n      }\n\n      // Filtro de status\n      if (statusFilter && item.status !== statusFilter) return false;\n\n      // Filtro de UF\n      if (ufFilter && item.uf !== ufFilter) return false;\n\n      // Filtro de segmento\n      if (segmentoFilter && item.segmento !== segmentoFilter) return false;\n\n      // Filtro de fornecedor\n      if (fornecedorFilter && item.fornecedor !== fornecedorFilter) return false;\n\n      return true;\n    });\n  }, [allEquipment, activeTab, searchQuery, statusFilter, ufFilter, segmentoFilter, fornecedorFilter]);\n\n  const handleView = (id: string) => {\n    toast({\n      title: \"Visualizar Equipamento\",\n      description: `Funcionalidade em desenvolvimento`,\n    });\n  };\n\n  const handleEdit = (id: string) => {\n    toast({\n      title: \"Editar Equipamento\",\n      description: `Funcionalidade em desenvolvimento`,\n    });\n  };\n\n  const handleDelete = (id: string) => {\n    const equipment = allEquipment.find(e => e.id === id);\n    if (equipment) {\n      setEquipmentToDelete({ id, tipo: equipment.tipo });\n      setDeleteDialogOpen(true);\n    }\n  };\n\n  const confirmDelete = () => {\n    if (equipmentToDelete) {\n      deleteMutation.mutate(equipmentToDelete);\n      setDeleteDialogOpen(false);\n      setEquipmentToDelete(null);\n    }\n  };\n\n  const isLoading = loadingNotebooks || loadingCelulares || loadingTerminais;\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Inventário</h1>\n          <p className=\"text-muted-foreground\">Gerenciar todos os equipamentos cadastrados</p>\n        </div>\n        <Skeleton className=\"h-96\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\" data-testid=\"heading-inventario\">Inventário</h1>\n        <p className=\"text-muted-foreground\">Gerenciar todos os equipamentos cadastrados</p>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList>\n          <TabsTrigger value=\"todos\" data-testid=\"tab-todos\">Todos ({allEquipment.length})</TabsTrigger>\n          <TabsTrigger value=\"notebook\" data-testid=\"tab-notebooks\">Notebooks ({notebooks.length})</TabsTrigger>\n          <TabsTrigger value=\"celular\" data-testid=\"tab-celulares\">Celulares ({celulares.length})</TabsTrigger>\n          <TabsTrigger value=\"terminal\" data-testid=\"tab-terminais\">Terminais ({terminais.length})</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value={activeTab} className=\"space-y-4\">\n          <EquipmentFilters\n            onSearchChange={setSearchQuery}\n            onStatusChange={setStatusFilter}\n            onUFChange={setUFFilter}\n            onSegmentoChange={setSegmentoFilter}\n            onFornecedorChange={setFornecedorFilter}\n            showFornecedor={activeTab === \"notebook\" || activeTab === \"todos\"}\n          />\n\n          <EquipmentTable\n            equipment={filteredEquipment}\n            onView={handleView}\n            onEdit={handleEdit}\n            onDelete={handleDelete}\n            canEdit={userRole !== \"Controle\"}\n            canDelete={userRole === \"Admin\"}\n          />\n        </TabsContent>\n      </Tabs>\n\n      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Confirmar Exclusão</AlertDialogTitle>\n            <AlertDialogDescription>\n              Tem certeza que deseja excluir este equipamento? Esta ação não pode ser desfeita.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancelar</AlertDialogCancel>\n            <AlertDialogAction \n              onClick={confirmDelete}\n              data-testid=\"button-confirm-delete\"\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n            >\n              Excluir\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":8914},"client/src/pages/Login.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Lock, User } from \"lucide-react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Login() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { login } = useAuth();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      await login(email, password);\n      toast({\n        title: \"Login realizado com sucesso!\",\n        description: \"Bem-vindo ao sistema de inventário\",\n      });\n    } catch (error: any) {\n      toast({\n        variant: \"destructive\",\n        title: \"Erro no login\",\n        description: error.message || \"Credenciais inválidas\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-background to-muted p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1 text-center\">\n          <CardTitle className=\"text-2xl font-bold\">Sistema de Inventário</CardTitle>\n          <CardDescription>Entre com suas credenciais para acessar o sistema</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <div className=\"relative\">\n                <User className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"Digite seu email\"\n                  className=\"pl-9\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  data-testid=\"input-email\"\n                  required\n                />\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Senha</Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  placeholder=\"Digite sua senha\"\n                  className=\"pl-9\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  data-testid=\"input-password\"\n                  required\n                />\n              </div>\n            </div>\n\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              data-testid=\"button-login\"\n              disabled={isLoading}\n            >\n              {isLoading ? \"Entrando...\" : \"Entrar\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-4 text-xs text-muted-foreground text-center\">\n            <p>Usuário padrão: admin@opus.com</p>\n            <p>Senha: opus@@2025$%</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3480},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/AppSidebar.tsx":{"content":"import { SidebarProvider } from \"@/components/ui/sidebar\";\nimport AppSidebar from '../AppSidebar';\n\nexport default function AppSidebarExample() {\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar\n          userRole=\"Admin\"\n          onLogout={() => console.log('Logout clicked')}\n        />\n        <div className=\"flex-1 p-8\">\n          <h1 className=\"text-2xl font-bold\">Conteúdo Principal</h1>\n          <p className=\"text-muted-foreground mt-2\">A sidebar está funcionando!</p>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n","size_bytes":682},"client/src/components/examples/CelularForm.tsx":{"content":"import { useState } from 'react';\nimport CelularForm from '../CelularForm';\n\nexport default function CelularFormExample() {\n  const [data, setData] = useState({});\n  \n  return (\n    <div className=\"p-6 max-w-4xl\">\n      <CelularForm data={data} onChange={setData} />\n    </div>\n  );\n}\n","size_bytes":285},"client/src/components/examples/DashboardCharts.tsx":{"content":"import DashboardCharts from '../DashboardCharts';\n\nconst mockStatusData = [\n  { name: \"Em Uso\", value: 98 },\n  { name: \"Devolver\", value: 12 },\n  { name: \"Correio\", value: 8 },\n  { name: \"Guardado\", value: 20 },\n  { name: \"Troca\", value: 7 },\n];\n\nconst mockUFData = [\n  { name: \"SP\", value: 65 },\n  { name: \"RJ\", value: 45 },\n  { name: \"MG\", value: 20 },\n  { name: \"RS\", value: 15 },\n];\n\nexport default function DashboardChartsExample() {\n  return (\n    <DashboardCharts\n      statusData={mockStatusData}\n      ufData={mockUFData}\n    />\n  );\n}\n","size_bytes":545},"client/src/components/examples/DashboardStats.tsx":{"content":"import DashboardStats from '../DashboardStats';\n\nconst mockData = {\n  totalEquipment: 145,\n  byStatus: {\n    \"EM USO\": 98,\n    \"DEVOLVER\": 12,\n    \"CORREIO\": 8,\n    \"GUARDADO\": 20,\n    \"TROCA\": 7,\n  },\n  byUF: {\n    \"SP\": 65,\n    \"RJ\": 45,\n    \"MG\": 20,\n    \"RS\": 15,\n  },\n};\n\nexport default function DashboardStatsExample() {\n  return <DashboardStats {...mockData} />;\n}\n","size_bytes":372},"client/src/components/examples/EquipmentFilters.tsx":{"content":"import EquipmentFilters from '../EquipmentFilters';\n\nexport default function EquipmentFiltersExample() {\n  return (\n    <EquipmentFilters\n      onSearchChange={(val) => console.log('Search:', val)}\n      onStatusChange={(val) => console.log('Status:', val)}\n      onUFChange={(val) => console.log('UF:', val)}\n      onSegmentoChange={(val) => console.log('Segmento:', val)}\n      onFornecedorChange={(val) => console.log('Fornecedor:', val)}\n      showFornecedor={true}\n    />\n  );\n}\n","size_bytes":484},"client/src/components/examples/EquipmentTable.tsx":{"content":"import EquipmentTable from '../EquipmentTable';\n\nconst mockEquipment = [\n  { id: \"1\", tipo: \"Notebook\", responsavel: \"João Silva\", modelo: \"Dell Latitude 5420\", status: \"EM USO\", uf: \"SP\", segmento: \"TI\" },\n  { id: \"2\", tipo: \"Celular\", responsavel: \"Maria Santos\", modelo: \"iPhone 13\", status: \"DEVOLVER\", uf: \"RJ\", segmento: \"Vendas\" },\n  { id: \"3\", tipo: \"Terminal\", responsavel: \"Pedro Costa\", modelo: \"REP 100\", status: \"GUARDADO\", uf: \"MG\", segmento: \"Administrativo\" },\n];\n\nexport default function EquipmentTableExample() {\n  return (\n    <EquipmentTable\n      equipment={mockEquipment}\n      onView={(id) => console.log('View:', id)}\n      onEdit={(id) => console.log('Edit:', id)}\n      onDelete={(id) => console.log('Delete:', id)}\n    />\n  );\n}\n","size_bytes":757},"client/src/components/examples/EquipmentTypeSelector.tsx":{"content":"import { useState } from 'react';\nimport EquipmentTypeSelector from '../EquipmentTypeSelector';\n\nexport default function EquipmentTypeSelectorExample() {\n  const [selected, setSelected] = useState<string>();\n  \n  return (\n    <EquipmentTypeSelector \n      onSelect={(type) => {\n        setSelected(type);\n        console.log('Selected type:', type);\n      }}\n      selectedType={selected}\n    />\n  );\n}\n","size_bytes":403},"client/src/components/examples/HistoryTimeline.tsx":{"content":"import HistoryTimeline from '../HistoryTimeline';\n\nconst mockHistory = [\n  {\n    id: \"1\",\n    action: \"edicao\",\n    user: \"Admin\",\n    timestamp: new Date(2025, 0, 2, 14, 30),\n    details: \"Alterou o status de EM USO para DEVOLVER\",\n    equipment: \"Notebook Dell Latitude 5420 - João Silva\",\n  },\n  {\n    id: \"2\",\n    action: \"criacao\",\n    user: \"Suporte TI\",\n    timestamp: new Date(2025, 0, 2, 10, 15),\n    details: \"Cadastrou novo equipamento\",\n    equipment: \"Celular iPhone 13 - Maria Santos\",\n  },\n  {\n    id: \"3\",\n    action: \"exclusao\",\n    user: \"Admin\",\n    timestamp: new Date(2025, 0, 1, 16, 45),\n    details: \"Removeu equipamento do inventário\",\n    equipment: \"Terminal REP 50 - Equipamento danificado\",\n  },\n];\n\nexport default function HistoryTimelineExample() {\n  return <HistoryTimeline entries={mockHistory} />;\n}\n","size_bytes":835},"client/src/components/examples/LoginForm.tsx":{"content":"import LoginForm from '../LoginForm';\n\nexport default function LoginFormExample() {\n  return (\n    <LoginForm\n      onLogin={(username, password) => {\n        console.log('Login attempt:', username, password);\n      }}\n    />\n  );\n}\n","size_bytes":233},"client/src/components/examples/NotebookForm.tsx":{"content":"import { useState } from 'react';\nimport NotebookForm from '../NotebookForm';\n\nexport default function NotebookFormExample() {\n  const [data, setData] = useState({});\n  \n  return (\n    <div className=\"p-6 max-w-4xl\">\n      <NotebookForm data={data} onChange={setData} />\n    </div>\n  );\n}\n","size_bytes":289},"client/src/components/examples/StatusBadge.tsx":{"content":"import StatusBadge from '../StatusBadge';\n\nexport default function StatusBadgeExample() {\n  return (\n    <div className=\"flex gap-2 flex-wrap\">\n      <StatusBadge status=\"EM USO\" />\n      <StatusBadge status=\"DEVOLVER\" />\n      <StatusBadge status=\"CORREIO\" />\n      <StatusBadge status=\"GUARDADO\" />\n      <StatusBadge status=\"TROCA\" />\n    </div>\n  );\n}\n","size_bytes":356},"client/src/components/examples/TerminalForm.tsx":{"content":"import { useState } from 'react';\nimport TerminalForm from '../TerminalForm';\n\nexport default function TerminalFormExample() {\n  const [data, setData] = useState({});\n  \n  return (\n    <div className=\"p-6 max-w-4xl\">\n      <TerminalForm data={data} onChange={setData} />\n    </div>\n  );\n}\n","size_bytes":289},"client/src/components/examples/UserManagementTable.tsx":{"content":"import UserManagementTable from '../UserManagementTable';\n\nconst mockUsers = [\n  { id: \"1\", nome: \"Admin Sistema\", email: \"admin@sistema.com\", perfil: \"Admin\" as const, ativo: true },\n  { id: \"2\", nome: \"Suporte TI\", email: \"suporte@sistema.com\", perfil: \"Suporte\" as const, ativo: true },\n  { id: \"3\", nome: \"Controle Geral\", email: \"controle@sistema.com\", perfil: \"Controle\" as const, ativo: true },\n];\n\nexport default function UserManagementTableExample() {\n  return (\n    <UserManagementTable\n      users={mockUsers}\n      onEdit={(id) => console.log('Edit user:', id)}\n      onDelete={(id) => console.log('Delete user:', id)}\n    />\n  );\n}\n","size_bytes":645},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}